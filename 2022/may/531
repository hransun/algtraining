https://leetcode.cn/problems/minimum-cost-to-merge-stones/submissions/

class Solution(object):
    def mergeStones(self, stones, k):
        """
        :type stones: List[int]
        :type k: int
        :rtype: int
        """
        n = len(stones)
        f = [[[float('inf')]* (k+1) for _ in range(n)] for _ in range(n)]
        for i in range(n):
            # f[l][r][i] -> l, r , i piles - > left, right , i piles 
            f[i][i][1] = 0
        for length in range(2,n+1):
            for l in range(n - length+1):
                r = l + length -1
                for i in range(2,k+1):
                    for p in range(l,r):
                        f[l][r][i] = min(f[l][r][i], f[l][p][1] + f[p+1][r][i-1])
                sum  =0
                for p in range(l, r+1):
                    sum += stones[p]
                f[l][r][1] = min(f[l][r][1], f[l][r][k] + sum)
        return f[0][n-1][1] if f[0][n-1][1] != float('inf') else -1 
        