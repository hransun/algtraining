https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/submissions/

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        n = len(prices)
        prices = [0] + prices
        dp = [ [float('-inf')] * 2 for _ in range(n+1)]
        dp[0][0] = 0
        for i in range(n+1):
            for j in range(2):
                # 0 = no stock
                dp[i][0] = max(dp[i][0], dp[i-1][1] + prices[i])
                dp[i][1] = max(dp[i][1], dp[i-1][0] - prices[i])
                dp[i][j] = max(dp[i-1][j], dp[i][j])
        return dp[n][0]

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        n = len(prices)
        prices = [0] + prices
        dp = [ [float('-inf')] * 2 for _ in range(2)]
        dp[0][0] = 0
        for i in range(1,n+1):
            dp[i&1][0] = dp[i&1][1] = float('-inf')
            for j in range(2):
                # 0 = no stock
               
                dp[i&1][0] = max(dp[i&1][0], dp[i-1&1][1] + prices[i])
                dp[i&1][1] = max(dp[i&1][1], dp[i-1&1][0] - prices[i])
                dp[i&1][j] = max(dp[i-1&1][j], dp[i&1][j])
        return dp[n&1][0]
        

https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iv/submissions/

class Solution(object):
    def maxProfit(self, k, prices):
        """
        :type k: int
        :type prices: List[int]
        :rtype: int
        """
        n , c = len(prices), k 
        prices = [0] + prices
        dp = [ [[float('-inf')] * (c+1) for i in range(2) ] for _ in range(n+1)]
        dp[0][0][0] = 0
        for i in range(1,n+1):
            for j in range(2):
                for k in range(c+1):

                    # 0 = no stock
                    dp[i][0][k] = max(dp[i][0][k], dp[i-1][1][k] + prices[i])
                    if k > 0:
                        dp[i][1][k] = max(dp[i][1][k], dp[i-1][0][k-1] - prices[i])
                    dp[i][j][k] = max(dp[i-1][j][k], dp[i][j][k])
        ans = 0 
        for k in range(c+1):
            ans = max(ans, dp[n][0][k])
        return ans 
        
