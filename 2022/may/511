
'''
You will be supplied with two data files in CSV format .
The first file contains statistics about various dinosaurs. The second file contains additional data.
Given the following formula, speed = ((STRIDE_LENGTH / LEG_LENGTH) - 1) * SQRT(LEG_LENGTH * g). Χ
Where g = 9.8 m/s^2 (gravitational constant)

Write a program to read in the data files from disk, it must then print the names of only the bipedal dinosaurs from fastest to slowest.
Do not print any other information..google  и

. check 1point3acres for more.$ cat dataset1.csv
NAME,LEG_LENGTH,DIET
Hadrosaurus,1.4,herbivore
Struthiomimus,0.72,omnivore. Waral dи,
Velociraptor,1.8,carnivore
Triceratops,0.47,herbivore
Euoplocephalus,2.6,herbivore
Stegosaurus,1.50,herbivore
Tyrannosaurus Rex,6.5,carnivore

$ cat dataset2.csv 
NAME,STRIDE_LENGTH,STANCE
Euoplocephalus,1.97,quadrupedal. Χ
Stegosaurus,1.70,quadrupedal
Tyrannosaurus Rex,4.76,bipedal
Hadrosaurus,1.3,bipedal
Deinonychus,1.11,bipedal
-baidu 1point3acresStruthiomimus,1.24,bipedal
Velociraptorr,2.62,bipedal
'''
# dic , key is name , value is (stride_length , leg length, speed)
import math 
d2 , d = {}, {}
with open('data2.csv') as f:
  f.readline()
  for line in f.readlines():
    name , stride_length , stance = line.strip().split(",")
    if stance == 'bipedal':
      d2[name] = stride_length

with open('data1.csv') as f:
  f.readline()
  for line in f.readlines():
    name, leg_length , _ = line.strip().split(",")
    if name in d2:
      
      d[name]=(d2[name],leg_length)
      
ans = {}
for k, v in d.items():
  #((STRIDE_LENGTH / LEG_LENGTH) - 1) * SQRT(LEG_LENGTH * g)
  stride_length, leg_length = float(v[0]), float(v[1])
  speed = ((stride_length/ leg_length)-1)* math.sqrt(leg_length* 9.8)
  ans[k] = speed 

result = sorted(ans.items(), key = lambda x: x[1], reverse = True)

for name in result:
  print(name[0])
   

# Minesweeper

#In the game of Minesweeper you are given a grid of size L x W that has a variable #number of mines, M, in random locations within the grid. Write a function that #generates random mine locations within the grid.
  
  
# Your function gen(L, W, M), given L of 2, W of 3, M of 3 could return the following:
#
# +----+----+----+
# | X  |    |    |
# |    |    |    |
# +--------------+
# |    | X  | X  |
# |    |    |    |
# +----+----+----+

import random
def generate_grid(length, width, mines):
  visited =set()
  count =0
  while count < mines:
    choosed = random.randint(0,length * width -1)
    if choosed in visited:
      continue
    visited.add(choosed)
    count +=1
  print(visited)
  result = [[0] * width for _ in range(length)]
  for choosed in visited:
    result[choosed//length][choosed%width] = 1
  return result

ans = generate_grid(2,3,3)
print(ans)
