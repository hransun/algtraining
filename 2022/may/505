https://leetcode-cn.com/problems/maximum-product-subarray/submissions/

class Solution(object):
    def maxProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        dp_max = [0 ] * n
        dp_min = [0] * n
        dp_max[0] = dp_min[0] = nums[0]
        for i in range(1,n):
            dp_max[i] = max(nums[i], dp_max[i-1]* nums[i], dp_min[i-1]* nums[i])

            dp_min[i] = min(nums[i], dp_max[i-1]* nums[i], dp_min[i-1]* nums[i])
        return max(dp_min + dp_max)

https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/submissions/

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        n = len(prices)
        dp = [0] * n
        min_price = prices[0]
        for i in range(1,n):
            min_price = min(prices[i], min_price)
            dp[i] = max(dp[i-1], prices[i] - min_price)

        return dp[n-1]
        