https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/submissions/

class Solution(object):
    def maxProfit(self, prices, fee):
        """
        :type prices: List[int]
        :type fee: int
        :rtype: int
        """
        n = len(prices)
        prices = [0] + prices
        dp = [[float('-inf')] * 2 for _ in range(n+1)]
        dp[0][0] = 0
        for i in range(1,n+1):
            for j in range(2):
                dp[i][0] =max(dp[i][0], dp[i-1][1] + prices[i])
                dp[i][1]= max(dp[i][1], dp[i-1][0] - prices[i]- fee)
                dp[i][j]= max(dp[i][j], dp[i-1][j])
        return dp[n][0] 

https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/submissions/

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        n = len(prices)
        prices = [0] + prices
        dp = [[[float('-inf')] * 2 for _ in range(2)] for _ in range(n+1)]
        dp[0][0][0] = 0
        for i in range(1,n+1):
            for j in range(2):
                for l in range(2):
                    dp[i][0][1] =max(dp[i][0][1], dp[i-1][1][0] + prices[i])
                    dp[i][1][0]= max(dp[i][1][0], dp[i-1][0][0] - prices[i])
                    dp[i][j][0]= max(dp[i][j][0], dp[i-1][j][l])
        return max(dp[n][0][1], dp[n][0][0])

class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        n = len(prices)
        prices = [0] + prices
        dp = [[[float('-inf')] * 2 for _ in range(2)] for _ in range(2)]
        dp[0][0][0] = 0
        for i in range(1,n+1):
            for j in range(2):
                for l in range(2):
                    dp[i&1][0][1] =max(dp[i&1][0][1], dp[i-1&1][1][0] + prices[i])
                    dp[i&1][1][0]= max(dp[i&1][1][0], dp[i-1&1][0][0] - prices[i])
                    dp[i&1][j][0]= max(dp[i&1][j][0], dp[i-1&1][j][l])
        return max(dp[n&1][0][1], dp[n&1][0][0])