https://leetcode.cn/problems/house-robber/submissions/

class Solution(object):
    def rob(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        nums = [0] + nums
        
        
        dp = [[float("-inf") for _ in range(2)]  for _ in range(n+1)]
        
        dp[0][0] = 0
        for i in range(1,n+1):
            for j in range(2):
                dp[i][0] = max(dp[i-1][0], dp[i-1][1])
                dp[i][1] = dp[i-1][0] + nums[i]
                
        return max(dp[n][0], dp[n][1])

https://leetcode.cn/problems/minimum-remove-to-make-valid-parentheses/

class Solution(object):
    def minRemoveToMakeValid(self, s):
        """
        :type s: str
        :rtype: str
        """
        stack = []
        remove =[]
        for index , c in enumerate(s):
            if c not in "()":
                continue
            elif c == "(":
                stack.append(index)
            elif not stack:
                remove.append(index)
            else:
                stack.pop()
        ans =[]

        for index , c in enumerate(s):
            if index not in stack and index not in remove:
                ans.append(c)
        return "".join(ans)