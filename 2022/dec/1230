https://leetcode.cn/problems/kth-node-from-end-of-list-lcci/solution/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public int kthToLast(ListNode head, int k) {
        ListNode fast = head;
        ListNode slow = head;
        for (int i = 0;i < k;i++) {
            fast = fast.next;
        }
        while (fast!= null) {
            fast = fast.next;
            slow = slow.next;
        }
        return slow.val;

    }
}

https://leetcode.com/problems/maximum-product-of-three-numbers/description/

class Solution {
    public int maximumProduct(int[] nums) {
        int max1 =Integer.MIN_VALUE;
        int max2 = Integer.MIN_VALUE;
        int max3 = Integer.MIN_VALUE;
        int min1 = Integer.MAX_VALUE;
        int min2 = Integer.MAX_VALUE;

        for (int num: nums) {
            if (num > max1) {
                // num large than max1 
                max3 = max2;
                max2 = max1;
                max1 = num;

            } else if (num > max2) {
                max3 = max2;
                max2 = num;

            } else if (num > max3) {
                max3 = num;
            }
            // why not use else if here
            // because each iter we need set up max1 - 3 and min1 - 2 
            if (num < min1) {
                min2 = min1;
                min1 = num;
            } else if (num < min2) {
                min2 = num;
            }
        }
        int candidate1 = max1 * max2 * max3;
        int candidate2 = min1* min2 * max1;
        return Math.max(candidate1,candidate2);
    }
}

https://leetcode.com/problems/rotate-string/

