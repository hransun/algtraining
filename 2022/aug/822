https://leetcode.cn/problems/remove-duplicate-letters/

class Solution {
    public String removeDuplicateLetters(String s) {
        int length = s.length();
        if (length <=1) return s;
        int[] lastOccurrence = new int[26];
        for (int i =0;i < length;i++) {
            lastOccurrence[s.charAt(i)- 'a'] = i;
        }
        int pos =0;
        for (int i =0;i < length;i++) {
            if (s.charAt(i) < s.charAt(pos) ) {
                pos = i;
            }
            if (lastOccurrence[s.charAt(i)- 'a'] == i) break;
        }
        String remaiderString = s.substring(pos +1).replace(""+s.charAt(pos),"");
        return s.charAt(pos) + removeDuplicateLetters(remaiderString);
    }
}

class Solution {
    public String removeDuplicateLetters(String s) {
        Stack<Character> stack = new Stack<>();
        boolean[] seen  = new boolean[26];
        int[] last_occurrence = new int[26];
        for (int i = 0;i < s.length();i++) {
            last_occurrence[s.charAt(i) - 'a'] = i;
        }
        for (int i =0;i < s.length();i++) {
            char c = s.charAt(i);
            if (!seen[c-'a']) {
                while (!stack.isEmpty() && c < stack.peek() &&
                        last_occurrence[stack.peek()-'a'] > i)
                    seen[stack.pop()-'a'] = false;
                    seen[c-'a'] = true;
                    stack.push(c);
            }
        }
        String result ="";
        while (!stack.isEmpty()) result = stack.pop() + result;
        return result;
    }
}

class Solution:
    def removeDuplicateLetters(self, s: str) -> str:
        stack =[]
        remain_counter = collections.Counter(s)
        for c in s:
            if c not in stack:
                while stack and c < stack[-1] and remain_counter[stack[-1]]> 0:
                    stack.pop()
                stack.append(c)
            remain_counter[c] -=1
        return "".join(stack)