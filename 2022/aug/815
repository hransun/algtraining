https://leetcode.cn/problems/special-binary-string/

class Solution:
    def makeLargestSpecial(self, s: str) -> str:
        stkc , pos = 0, 0
        new_subs = []
        for i in range(len(s)):
            if s[i] == '0':
                stkc -=1
            else:
                stkc +=1
            if stkc == 0:
                new_subs.append('1' + self.makeLargestSpecial(s[pos+1:i]) +'0')
                pos = i+1
        length = len(new_subs)
        self.quickSort(new_subs,0 , length-1)
        result = ''
        for i in range(0,length):
            result += new_subs[length-1-i]
        return result 



    def partition(self,arr, low, high):
        i = low -1
        pivot = arr[high]
        for j in range(low,high):
            if arr[j] <= pivot:
                i += 1
                arr[i], arr[j] = arr[j], arr[i]
        arr[i+1], arr[high] = arr[high], arr[i+1]
        return i+1
    
    def quickSort(self,arr,low,high):
        if low < high:
            pi = self.partition(arr,low,high)
            self.quickSort(arr,low,pi-1)
            self.quickSort(arr,pi+1,high)


https://leetcode.cn/problems/sorted-matrix-search-lcci/submissions/


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        if (m ==0) return false;
        int n = matrix[0].length;
        if  (n==0) return false;
        return searchSubMatrix(matrix,target,0,0,m-1,n-1);

    }

    private boolean searchSubMatrix(int[][] matrix, int target,int startRow,int startColumn,int endRow,int endColumn) {
        if (startRow > endRow || startColumn > endColumn) return false;
        if (matrix[startRow][startColumn] > target) return false;
        int dianonal_length = Math.min(endRow - startRow +1, endColumn - startColumn +1);
        for (int i = 0;i < dianonal_length; i++) {
            if (matrix[startRow+i][startColumn + i] == target) {
                return true;
            }
            if (i == dianonal_length -1 || matrix[startRow + i+1][startColumn +i +1] > target) {
                return searchSubMatrix(matrix,target,startRow,startColumn + i+1,startRow+i,endColumn) || searchSubMatrix(matrix,target,startRow+i+1,startColumn,endRow,startColumn+i);
            }
        }
        return false;
    }
}