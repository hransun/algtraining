https://leetcode.cn/problems/search-in-rotated-sorted-array/

class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        int l =0, r = n-1;
        while (l <= r) {
            int mid = (l + r) /2;
            if (nums[mid] == target) {
                return mid;
            }
            if (nums[0] <= nums[mid]) {
                if (nums[0] <= target && target < nums[mid]) {
                    r = mid -1;
                }
                else {
                    l = mid +1;
                }

            } else {
                if (nums[mid] < target && target <= nums[n-1]) {
                    l = mid +1;
                } else {
                    r = mid -1;
                }

            }
        }
        return -1;

    }
}

https://leetcode.cn/problems/search-in-rotated-sorted-array-ii/

class Solution {
    public boolean search(int[] nums, int target) {
        int n = nums.length;
        int l =0, r = n-1;
        int mid;
        while (l <= r) {
            mid = (l + r) /2;
            if (nums[mid] == target) {
                return true;
            }
            if  (nums[l] == nums[mid]) {
                l++;
                continue;
            }
            if (nums[l] <= nums[mid]) {
                if (nums[l] <= target && target < nums[mid]) {
                    r = mid -1;
                }
                else {
                    l = mid +1;
                }

            } else {
                if (nums[mid] < target && target <= nums[r]) {
                    l = mid +1;
                } else {
                    r = mid -1;
                }

            }
        }
        return false;


    }
}

https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/

class Solution {
    public int maxProfit(int[] prices) {
        int result =0;
        int n = prices.length;
        for (int i = 1;i < n;i++) {
            result += Math.max(0, prices[i] - prices[i-1]);
        }
        return result;

    }
}