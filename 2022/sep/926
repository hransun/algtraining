https://leetcode.com/problems/valid-anagram/submissions/

class Solution(object):
    def isAnagram(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        counter = [0 ] * 26
        for c in s:
            counter[ord(c) - ord('a')] +=1
        for c in t:
            counter[ord(c) - ord('a')]-=1
        for x in  counter:
            if x !=0:
                return False
        return True
            

class Solution(object):
    def isAnagram(self, s, t):
        """
        :type s: str
        :type t: str
        :rtype: bool
        """
        return sorted(s) == sorted(t)


https://leetcode.com/problems/group-anagrams/submissions/

class Solution(object):
    def groupAnagrams(self, strs):
        """
        :type strs: List[str]
        :rtype: List[List[str]]
        """
        ans = collections.defaultdict(list)
        for s in strs:
            key = tuple(sorted(s))
            ans[key].append(s)
        return ans.values()

https://leetcode.com/problems/two-sum/submissions/

class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        cache = collections.defaultdict(int)
        for idx,  num in enumerate(nums):
            if (target - num) in cache:
                return [cache[target-num],idx]
            cache[num] = idx
        

        
