https://leetcode.cn/problems/implement-magic-dictionary/

class MagicDictionary {
    class TrieNode {
        private int SIZE = 26;
        TrieNode [] child;
        boolean isWord;
        public TrieNode() {
            isWord = false;
            child = new TrieNode[SIZE];
        }
    }
    TrieNode root;

    public MagicDictionary() {
        root = new TrieNode();
    }
    
    public void buildDict(String[] dictionary) {
        for (String word : dictionary) {
            TrieNode temp = root;
            for (int i =0;i < word.length();i++) {
                char c = word.charAt(i);
                if (temp.child[c - 'a'] == null) {
                    temp.child[c - 'a'] = new TrieNode();
                }
                temp = temp.child[c - 'a'];
            }
            temp.isWord = true;
        }

    }
    
    public boolean search(String searchWord) {
        TrieNode presentNode = root;
        for (int i = 0; i < searchWord.length(); i++) {
            char c = searchWord.charAt(i);
            for (int j = 0; j < 26; j++) {
                if ((char) (j + 'a') == c || presentNode.child[j] == null) {
                    continue;
                }
                if (partSearch(presentNode.child[j], searchWord, i + 1)) {
                    return true;
                }
            }
            if (presentNode.child[c - 'a'] == null) return false;
            presentNode = presentNode.child[c - 'a'];

        }
        return false;
    }
    public boolean partSearch(TrieNode temp,  String  word,int index) {
        for (int i = index ;i < word.length();i++) {
            char c = word.charAt(i);
            if (temp.child[c - 'a'] == null) return false;
            temp = temp.child[c - 'a'];
        }
        return temp.isWord;
        
    }

}


class MagicDictionary(object):

    def __init__(self):
        self.hashdict = collections.defaultdict(int)
        self.dictionary = {}


    def buildDict(self, dictionary):
        """
        :type dictionary: List[str]
        :rtype: None
        """
        self.dictionary = dictionary
        for d in dictionary:
            for j in  range(len(d)):
                self.hashdict[d[:j]+'_'+d[j+1:]] +=1



    def search(self, searchWord):
        """
        :type searchWord: str
        :rtype: bool
        """
        for j in  range(len(searchWord)):
            if searchWord  in self.dictionary:
                if  (searchWord[:j]+'_'+searchWord[j+1:]) in self.hashdict and self.hashdict[searchWord[:j]+'_'+searchWord[j+1:]]>1:
                    return True
            if  searchWord   not  in self.dictionary:
                if  (searchWord[:j]+'_'+searchWord[j+1:]) in self.hashdict and self.hashdict[searchWord[:j]+'_'+searchWord[j+1:]]>0:
                    return True
        return False