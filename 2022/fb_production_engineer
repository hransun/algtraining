
被FB血虐。。。 PE第三轮SYSTEM。
以为会是这些问题
http://www.1point3acres.com/bbs/ ... adio%26sortid%3D311
结果根本不是啊！！！ 全尼玛底层system troubleshooting.
来来来，贴问题：
1. 一个process突然消耗了大量的内存， 导致其他进程特别慢，top检测不到。咋办？
1.1 如果这个进程是必要的，但是又不想让他吃太多内存导致其他进程变慢怎么办？
1.2 cpu idle, 但是mem消耗很大， 会是什么情况？
1.3 假设可以看到code, 如何check?
2. 本来好好的server, 突然某天早上11点memory消耗巨大，怎么check?
2.1 没有很多程序在运行， 那又会是什么原因？
2.2 各种情况。。。
3. 在你之前，有个人type ls . 结果卡住了， 按ctrl + c没用（你TM在逗我。。）
3.1 你看不到路径（我‍‌‌‍‍‌‌‍‌‌‍‌‌‌‍‌‌‍说可能是路径的问题）， 那怎么check当前这个ls进程在哪个路径run?
3.2 OK,你通过某些方式看到了（这个是可以做到的）， 且路径在 /mnt/var/xxx 那可能是什么原因？
3.3 假设是AWS的EBS， 那可能会是什么原因？ 如何解决？
卧槽。。。。我内心早已崩溃。。
不过在面试过程中，amazon的offer来了。。心里还是淡定了下来。。结束了无业游民的状态。。。
FB的PE真的好难。。。 只能好运了！
======

夏天面 FB 的 Production Engineer (PE)，之前发过的一个询问帖，苦寻面经，
http://www.1point3acres.com/bbs/ ... p;page=1#pid2043267
最终还是要感谢 deanmax， 给了许多指点。
这段日子又有后来人询问我关于 PE 的面经。那我就再开个贴 把之前的二面面经发在这里，希望可以造福后人。
括号里的是我自己答的，不一定对，大家参考。
Problems:
        #1 : Tell me every step after you input "$ ls -l *" and hit enter in bash.
                        - what happend before the command executes.
                        - how does kernal know what is "ls".
                        - how does kernal interprete this String.
                        - what system call are called? how do you understand the system call.
        #2 : what is pipe? ex: ls | grep , what happend when you type this.
        #3 : what is "file description"? (finally, he is examing me the STDIN / STDOUT / ERROR, these channels)
        #4 : when you execute "telnet google.com 80", what happend?
        #5 : Given a situation: The memory is crush and the system reboots due to a highly memory usage, what would
                        you do?
                        - How can you find out which process is causing this problem.
                                (use "top" try to find the highest I/O requests)
                        - How to find which file is being currently most reading or requesting?
                                (...)
                        - You may use "procfile" command.
                        - How can you avoid this happened? How to avoid the system rebooting due to the memo crush?
                                (write a monitoring script, if the memory load is high, kill the process which highly use the memory resource)
                        - do you know how "memory swap" work? (swap the sleeping process out, and keep the active ones inside the memo).
        #6 : Suppose I have separate DB server for the DB process. If my DB server running slow. What can you do?
                                (for hardware, you may use RAID to improve read/write performance ... )
                        - What RAIN mode you're gonna use?
                                (RAID 5 or RAID 6)
                        - What is their difference?
                                (RAID 5 can have at most 1 disk failure, RAID 6 is two)
                                (Or scale up, replace with better CPU, memo ... )
                        - May be SSD ?
                                (yeh, SSD, or try to have faster spin speed hard disk.)
                                (for the software, you may replace Relational Database System with NoSQL database)
面后体会：
- 对于 Linux Kernal 要多加了解，并且要细致了解，每一步是怎么工作的。
- OS 中的各个部分是怎么协调的。
- 常用的command，tool 要会。
现在体会：
建议面 PE 的小伙伴们，如果系统知识很强的话，那就赶紧面吧。
如果大家也是写程序，算法啥的比较顺手，建议可以试一下。过不了也可以让 HR 递简历给 SDE 相关的组，碰碰运气，看他们能不能给面试。
<福利> 一面面经：
1. English 转化为 Goat Latin Language。
规则：
        1. vowel 开头的单词，要在单词后面加 ma
        2. consonant 开头的单词，把这个 consonant 移动到单词末尾。
        3. 所有的单词末尾都要加上一个 String，这个 String 在第一个单词后面是 a，第二个单词后面是 aa，以此类推。
        ex：
                I speak Goat Latin -> Imaa peaksaa oatGaaa atinLaaaa
2. 是一道 Network 的题。大概意思是讲 有一项 Network Serv‍‌‌‍‍‌‌‍‌‌‍‌‌‌‍‌‌‍ice 要升级，大家决定 启用新的 Port 来减少 confusion。
这项迁移工程需要很久，所以需要 System 每天 report。
请你写一个 Script，输入 <hostName port1 port2> as command line argument, output the 迁移 progress，和那些 host running both version 和 host which does not running any version.
(当时完全不知所云，哪位大牛看到，可以写写想法，方便后面的童鞋）
祝福所有面 PE 的你们 好运！
====

1. 给你一本书(input)，统计里面词频最高的10个单词
先是说考虑input是一个大string的情况，用hashmap+maxheap直接秒就行了，注意一些细节处理就好，我写完被挑出一些小毛病，
改完小哥很满意然后上follow up: input是一个文件？改下代码的input处理就好了，按行读入按单词存入hashmap。写完继续follow up：
如果input文件很大，hashmap爆了内存怎么办？只考虑ASCII。然后开始估算大概要用多少内存，算下来几M到几十M不等的内存占用，然后pass

===

PE，全称是 Production Engineer，类似Google的SRE。
论坛内已经有不少帖子讲这个的面试了，虽然面试涉及范围广，不过比起SWE来说，题库更加固定一点。
现场面试一共有五轮：
manager轮
coding轮
system design轮
networking 轮
Linux kernel system 轮
1. 其中coding是fortune的实现，followup是内存放不下如何提升，这里注意follow up也是要实现的，楼主只是知道大概流程，结果现场写的是卡壳十分严重；
2. design轮是设计一个 rate limiter的系统；
3. 剩下的networking和system就是考的基础问答，要把基本概念搞清楚，
比如：知道如何解释fork，execv，pipe，还有dup2，楼主最后两个并没有回答上来；
比如：解析一个hostname的流程是如何的，DNS用了什么protocol

====

Question: What happens after you type ls -l foo*? 超高頻題。
https://discuss.leetcode.com/topic/91092/elaborate-what-happens-under-the-hood-after-typing-ls/3
這份總結是我從地里和Glassdoor找到的，希望能幫到各位。我下年再報一次！請大家不要隨便發出去，這是給地里人的專利，而且用的是LZ的Github account。。
https://gist.github.com/yeukhon/1631e000dd4f3f77edc0600fbd6e3fa8
這些是我讀過的參考書和網站。
Linux Development Kernel
Modern Operating System
TCP/IP Guide
Advanced Programming in the Unix Environment
https://lwn.net
https://jvns.ca/categories/kernel/
https://encrypted.google.com/search?q=site:lwn.net+%22this+article+was+contributed+by+valerie%22&cad=h
http://stackoverflow.com/
https://unix.stackexchange.com/
https://askubuntu.com/
https://security.stackexchange.com/
https://crypto.stackexchange.com/
https://networkengineering.stackexchange.com/
雖然第一本書是05年寫的，目前linux kernel裡有些東西改變了，但基本都一樣。不過我一定要強調，process 和 thread 之間的分別我讀過的書都沒有很好的解譯。網上資料都是不齊全。
https://unix.stackexchange.com/questions/364660/are-threads-implemented-as-processes-on-linux
https://unix.stackexchange.com/questions/284123/status-of-a-threads-vs-status-of-a-process
https://www.akkadia.org/drepper/nptl-design.pdf

=====

首先感谢之前的面经贴，十分有用。贴几个跟我经历比较类似也比较详细的：
http://www.1point3acres.com/bbs/thread-213173-1-1.html （详细流程）
http://www.1point3acres.com/bbs/ ... read&tid=167740 （恐龙题）
http://www.1point3acres.com/bbs/ ... read&tid=177060
说一些自己的经历：
学校招聘会投的简历，招聘会上遇到的就是一个PE，当时感觉这职位挺有趣的就多聊了一会。1. 隔了一个多月才接到HR邮件问有没有兴趣电话聊一下，上来就考了一些Linux问题，有点措手不及，凭着感觉答了一些。大概就是问用什么command查CPU usage, routing table, etc.
2. 第二轮是coding， 词频统计和恐龙题（事后才发现是经典面经题）
3. 第三轮是system， 解释vmstat output， 经典的ls问题 （http://sysadvent.blogspot.com/20 ... ls-rabbit-hole.html）
4. 最后onsite有四轮， 两轮coding，一轮behavior，一轮system。（原来HR说两轮coding的面试官一个是software engineer另一个是production engineer， 最后来的两个都是PE）
coding分别问了 扫雷题（生成matrix，放置地雷，生成数字）； fortune题（给一个文件，存的是一些名人名言，用一个特殊符号分隔，写一个函数随机打出其中一个名言，follow up 问文件太大怎么办）； 然后又是一道变种词频题； 还有一道是替换当前目录下所有HTML文件里的邮箱地址
system问的是server memory usage suddenly increase要如何troubleshooting， 然后会顺着你的回答一直问下去。面试官口音有点重，增加了沟通的难度。感觉有些地方没想到一块去，之前着重准备的OS，IO，NFS方向的东西都没机会讲‍‌‌‍‍‌‌‍‌‌‍‌‌‌‍‌‌‍到，倒是纠结在network和application lelvel。

====

1. 上来先是一道数组的题热身，非常简单，感觉是 LC easy 难度，内容忘了，大概做法是先扫一遍，然后求平均数啥的，然后扫一遍求结果。也可以直接 two pointer 指向两边，然后往中间扫。
2. 经典恐龙题，地里有详细说明的帖子。follow up 是文件内容非常大怎么办，解决方法是把文件分成多块，然后分块处理再合并结果（就是 MapReduce）
System 面：
1. 经典的当 ls -al *.c 时会发生什么。事前有准备所以答的比较轻松。在描述了一遍之后，小哥又根据回答的内容深挖了各个地方的细节（例如 fork 具体做了什么、什么是 syscall、编译器是怎么把 stat 这类 syscall 转换成汇编指令的过程与方法）。follow up 有些细节事先并不知道，于是和他讨论着猜测了一下。比较有意思的是小哥问我 *.c 是怎么处理的，我说有可能是 shell 也有可能是 command 去做处理，我不确定。于是他问我怎么去验证，我说用 strace 去跟踪一下，看看 execve 加载 ls 程序的时候的参数是 *.c 还是具体的文件名字。（后面自己试了下，发现是 shell 对 *.c 做的转换。）
2. 上一题问完之后发现时间还有不少，于是又问了个 troubleshooting 的题。首先信息是 cpu load 很高但是 usage 很低 -> 可能很多进程在 waiting，vmstat 查进一步信息 -> 确实很多进程在 uninterrupted sleeping，ps -aux 查 state D 进程 -> strace 以及 lsof 看 这些进程是在 waiting 什么 -> nfs -> 啊 nfs 我不太熟。。 -> 我觉得可以用 tracerouter 之类的检查下网络状况吧…
总体还是蛮愉快的。运气也比较好，这两题涉及内容都准备比较充足（除了 NFS。。）。
必读文章：
http://sysadvent.blogspot.com/20 ... ls-rabbit-hole.html 文章讲的很琐碎，但可以借此把握核心脉络。碰到有疑惑/不明白的地方要去进一步查。学习文章作者是怎么样一步步深入的。
http://blog.notreally.org/2008/0 ... strong-io-in-linux/ 非常好的 troubleshooting 文章。PE 面试 troubleshooting 很大一类都和 block I/O 有关（原因基本都是 NFS）
后来发现的值得读的文章：
http://docs.oracle.com/cd/E19455-01/806-0916/6ja8539fs/
http://nonfunctionaltestingtools ... tput-explained.html
部分重点命令（必须实现都在 Linux 上自己跑过）:
strace, vmstat, top, free, ps
Onsite:
1. Coding，面试官 production engineer。(1) 翻转数组中的部分内容。非常简单，顺手写了 in place 和 create new array 两个版本。(2) 给一个文件，统计单词频率，输出出现次数前 N 的单词。follow up 是处理标点。以及问了下文件太大会怎么样。(3) 面经题，有千台机器，有些在旧的端口运行旧程序，有些新端口运行新程序，写程序统计。用 bash 的话比较简单，因为时间有限就没写代码，只讲了思路。先 ssh 到机器上，ps + grep + awk 处理数据得到结果，然后收集结果统计输出就行了。因为机器很多，所以并行处理。然后要用 lockfile 之类的东西加锁解决同步异步问题。bash 并行编程参考文章 http://www.nherson.com/blog/2014/10/31/bash-subshells . 嗯，其实我不知道具体的 ps & grep & awk 要怎么写才能得到结果。。对语法不熟。当时也和面试官表示了这点，不熟语法但是我确定这是可行的。
2. Coding，面试官 software engineer。(1) 给俩字符串，判断是否 one-edit-distance。(2) 给一个 BST 以及一个范围，构造一个子树落在这个范围。recursive 秒之。
3. Behavior. 拿着你的简历一条一条怼你。。常见问题包括 most challenging part 之类的。英语太差，面的稀烂。还好简历句句属实。
4. System. 围绕有一个进程总是 out of memory 导致 crush 来问各种问题。涉及包括限制进程 memory 使用、如何找出进程 out of mem‍‌‌‍‍‌‌‍‌‌‍‌‌‌‍‌‌‍ory 原因（自己用各种工具尝试 & 和写这段代码的人沟通）、一堆进程无限疯狂 fork 自身，导致 OS 直接没法运行任何 command 了怎么办（去 /proc/pid/ 下查信息->找出问题进程与所属用户->限制用户组进程数目->kill)。总之乱七八糟回答一通。
心得体会：
1. 可以看出来，coding 都很简单。python 优势很大，毕竟 scripting 的部分不少。熟悉 bash 有优势，毕竟可以直接用各种 command。
2. linux 要熟悉，OS 基础概念要熟悉，常见 troubleshooting 最好要了解。碰到问题解决问题要有逻辑。
3. 准备常见 behavior question。自己简历要吃透。比较有趣的是，我事先准备了 why fb 和 why pe，结果第二轮 coding 一上来面试官暖场，先问了这俩问题。。（喵喵喵？.jpg）。而 behavior 轮并没问这个，而是全程怼简历orz
4. 第一轮最后时间问面试官问题 & 聊天，他提到说他喜欢问面试者的一个问题是问一个特别特殊的问题，而他期待得到的标准答案是 I don't know （。作为 PE 经常会遇到自己不擅长的问题 & 领域，这时候就要与擅长的人沟通 & 共同解决问题。

===

Coding 1: battleship，提供查询是否命中的api(i, j)，在N*N的矩阵里找到一个1*3的battleship；开始写了枚举是O(n^2)，面试官嫌效率太低，但是想不到优化成O(nlgn)一类方法，最后经面试官提醒写了改良版的每三行检查一行的策略，但复杂度还是O(n^2)，不知道有没有更好的方法，感觉有点炸裂
Coding 2: 实现linux下的fortune功能：给出一个文件包含各种字符串，要求设计API可以每次执行程序的时候随机输出其中一个字符串；先写了所有字符串用vector存在内存里随机选取的策略，follow up是文件太大如何处理，我选择了把所有字符串的开头位置预处理存到另一个文件里，每次再把这些起始位置读到内存里，随机选取一个再用fseek在源文件里把信息读完；后来又经面试官提醒，表示可以把开头位置的数据serialize到索引文件里，通过索引文件长度随机选取其中一个索引位置再去源文件fseek，总体很顺利、
System: 可以说是很炸裂了，从ls *的执行过程问起，讨论terminal console的关系，terminal进程的性质（尤其是没有图形界面下的terminal），聊到bash和不同的shell，提问shell解析命令行的机制，除了ls以外存在cd一类built-in command，为什么会有built-in command；因为是创建子进程，所以聊到了fork相关细节，以及COW机制；感觉一部分得‍‌‌‍‍‌‌‍‌‌‍‌‌‌‍‌‌‍靠面试官提醒才能答出来，也就fork和COW答得最顺畅；最后关于troubleshooting，问到如果一个进程一启动几秒以内就会占掉系统一切内存资源，然后让整个系统崩溃，怎样做可以最快止损。这个问题答得最炸裂，几次提示下来发现和面试官思路不太一样
Behavioral: 各种聊之前的coding经验，没什么好说的
感觉应该是要挂，求一波大米和人品吧，希望以后面试顺利些

======

上周五面完的Facebook Production Engineer, 总体感觉和地里的fb面经coding相比，难度不是很大。
第一轮：Behavior question。聊简历，然后面试官问一些general的behavior question。
第二轮：system。从ls -l foo*开始，穿插问各种相关问题，因为我的resume里有相关Linux shell的project，针对project里的内容又问了一下。具体题目涉及bg，fg，pipe原理，process。最后十五分钟左右问trouble shooting的问题。
第三轮：coding。类似merge interval，给两个array，array中是interval，按照start point的increasing order排序，返回一个array，merge两个array中overlap的interval。
第四轮：coding。一题是partiti‍‌‌‍‍‌‌‍‌‌‍‌‌‌‍‌‌‍on array into two parts with equal sum。一题是dinosaur，这里有点corner case没考虑到，面试官提醒了一下改正了。
发发面经，希望能是好消息！！！

===

vmstat 输出按列描述，中间问到了进程状态，内存管理机制，中断，syscall，swap，cs，user space和kernel space等等。
    troubleshoot：
        1.cat test卡住了怎么办？
        2.有个server上进程占用内存过高，影响了其他进程怎么办？OMM原理是什么？‍‌‌‍‍‌‌‍‌‌‍‌‌‌‍‌‌‍