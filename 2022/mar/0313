https://leetcode-cn.com/problems/basic-calculator/

class Solution(object):
    def calculate(self, s):
        """
        :type s: str
        :rtype: int
        """
        res  =0
        sign =1
        stack = []
        num =0

        for index , n in enumerate(s):
            if n.isdigit():
                num = num*10 + int(n)
            elif n == '+':
                res += sign * num
                sign =1
                num =0
            elif n =='-':
                res += sign * num
                sign = -1
                num =0
            elif n =='(':
                stack.append(res)
                stack.append(sign)
                res =0
                sign =1
            elif n == ')':
                res += sign * num
                num =0
                presign = stack.pop()
                prenum = stack.pop()
                res = res * presign + prenum
        res += num * sign 
        return res

https://leetcode-cn.com/problems/subdomain-visit-count/

class Solution(object):
    def subdomainVisits(self, cpdomains):
        """
        :type cpdomains: List[str]
        :rtype: List[str]
        """
        cache = collections.defaultdict(int)
        for each in cpdomains:
            count  , domain = each.split(" ")
            c = int(count)
            domains = domain.split(".")
            for i in range(len(domains)):
                key = ".".join(domains[i:])
                cache[key] += c
        return [str(cache[key]) + " " + key for key in cache]



https://leetcode-cn.com/problems/degree-of-an-array/

class Solution(object):
    def findShortestSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        count = 0
        cache = collections.defaultdict(list)
        for index , n in enumerate(nums):
            cache[n].append(index)
            if len(cache[n]) > count:
                count = len(cache[n])

        res = len(nums)
        for key in cache:
            if count == len(cache[key]):
                arr = cache[key]
                res = min(res, arr[-1] - arr[0] +1)
        return res 