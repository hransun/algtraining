https://leetcode-cn.com/problems/subarray-sum-equals-k/

class Solution(object):
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        pre = 0
        cache = {0:1}
        ans  =0

        for index , n in enumerate(nums):
            pre += n
            rest = pre - k
            if rest in cache:
                ans += cache[rest]
            cache[pre] = cache.get(pre,0) +1
        return ans 


https://leetcode-cn.com/problems/number-of-submatrices-that-sum-to-target/


class Solution(object):
    def numSubmatrixSumTarget(self, matrix, target):
        """
        :type matrix: List[List[int]]
        :type target: int
        :rtype: int
        """
        row , col = len(matrix), len(matrix[0])
        res =0
        grid = [[0] * col]

        for i in range (1,row):
            for j in range(col):
                matrix[i][j] += matrix[i-1][j]
        grid.extend(matrix)

        for i in range(row +1):
            for j in range( i+1, row+1):
                arr = [ x - y for x , y in zip(grid[j], grid[i])]
                res += self.subarraySum(arr,target)
        return res 
    
    def subarraySum(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        pre = 0
        cache = {0:1}
        ans  =0

        for index , n in enumerate(nums):
            pre += n
            rest = pre - k
            if rest in cache:
                ans += cache[rest]
            cache[pre] = cache.get(pre,0) +1
        return ans 
