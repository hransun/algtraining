https://leetcode-cn.com/problems/min-stack/


class MinStack(object):

    def __init__(self):
        self.stack = []
        self.min_stack = []


    def push(self, val):
        """
        :type val: int
        :rtype: None
        """
        self.stack.append(val)
        if not self.min_stack or self.min_stack[-1] >= val:
            self.min_stack.append(val)


    def pop(self):
        """
        :rtype: None
        """
        if self.stack:
            x = self.stack.pop()
        if x == self.min_stack[-1]:
            self.min_stack.pop()


    def top(self):
        """
        :rtype: int
        """
        return self.stack[-1]


    def getMin(self):
        """
        :rtype: int
        """
        return self.min_stack[-1]



# Your MinStack object will be instantiated and called as such:
# obj = MinStack()
# obj.push(val)
# obj.pop()
# param_3 = obj.top()
# param_4 = obj.getMin()

https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/

class Solution(object):
    def evalRPN(self, tokens):
        """
        :type tokens: List[str]
        :rtype: int
        """
        stack = []
        for c in tokens:
            if c in '+-*/':
                pre2 = stack.pop()
                pre1 = stack.pop()

                if c =='+':
                    stack.append(pre1+ pre2)
                elif c =='-':
                    stack.append(pre1 - pre2)
                elif c =='*':
                    stack.append(pre1 * pre2)
                elif c =='/':
                    stack.append(int(pre1 / float(pre2)))
                  
            else:
                stack.append(int(c))
            print(stack[-1])
       
        return stack[-1]
