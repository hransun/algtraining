https://leetcode.cn/problems/reducing-dishes/

class Solution {
    public int maxSatisfaction(int[] satisfaction) {
        Arrays.sort(satisfaction);
        int preSatisfactionSum = 0;
        int result = 0;
        for (int i = satisfaction.length-1;i >=0;i--) {
            int  currentSatisfaction =  satisfaction[i];
            if (currentSatisfaction + preSatisfactionSum >0) {
                preSatisfactionSum += currentSatisfaction;
                result += preSatisfactionSum;
            } else {
                break;
            }
        }
        return result;

    }
}

https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/

class Solution {
    public int atMostNGivenDigitSet(String[] digits, int n) {
        String[] D = digits;
        int N = n;
        String S= String.valueOf(N);
        int K = S.length();
        int dp[] = new int[K+1]; // less than N lower K-i low wei number
        dp[K] = 1;
        for (int i = K-1;i >=0;--i) {
            int Si = S.charAt(i) - '0';
            for (String d: D) {
                if  (Integer.valueOf(d) <  Si) {
                    dp[i] += Math.pow(D.length,K-i-1); // k-i - current wei = k-i-1
                }
                else if (Integer.valueOf(d)== Si) {
                    dp[i] += dp[i+1];
                }
            }
        }
        for (int i = 1;i < K;i++) {// k digits , k-1 digits ... 1 digit , sum of all of them
            dp[0] += Math.pow(D.length, i );
        }
        return dp[0];

    }
}