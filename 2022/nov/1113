https://leetcode.cn/problems/maximum-length-of-a-concatenated-string-with-unique-characters/

class Solution {
    public int maxLength(List<String> arr) {
        int[] bitMap = new int[arr.size()];
        int[] lens = new int[arr.size()];
        int idx = 0;
        for (String s: arr) {
            bitMap[idx] = getBitMask(s); // string to a bitmap number
            lens[idx] = s.length();
            idx++;
        }
        return dfs(bitMap,lens,0,0);

    }

    public int dfs(int[] bitMap,int[] lens,int start, int num) {
        if (start >= bitMap.length) {
            return 0;
        }
        int ans = 0;
        for (int i = start; i < bitMap.length;i++) {
            if (bitMap[i] != -1 && ((bitMap[i] & num) ==0)) {// no repeat char
                ans =  Math.max(ans,dfs(bitMap,lens,i+1,num | bitMap[i]) + lens[i]);
            }
        }
        return ans;
    }
    // each string has a bitmap number
    public int getBitMask(String s) {
        int bitMask = 0;
        for (char c: s.toCharArray()) {
            int bit = 1 << (c - 'a');
            if ((bitMask & bit) != 0) {// repeat char
                return -1;
            }
            bitMask |= bit;
        }
        return bitMask;
    }
}

https://leetcode.cn/problems/stickers-to-spell-word/

class Solution {
    public int minStickers(String[] stickers, String target) {
        int targetLength = target.length();
        int stickersLength = stickers.length;
        int dpLen = 1 << targetLength;
        int[] dp = new int[dpLen]; // 2^m dp[i] i: target  bitmap ,each char is concateed or not
        // dp[i] means  min # of stick

        final  char[] targetChars =  target.toCharArray();
        int[][] countOfAlphabet =  new int[stickersLength][26]; // each stick char #
        Set<Integer>[]  alphabetLocationSets = new Set[26];
        for (int i = 0;i < alphabetLocationSets.length;i++) {
            alphabetLocationSets[i] = new HashSet<>();
        }

        for (int i =0;i < stickersLength;i++) {
            String sticker = stickers[i];
            final  char[]  chars = sticker.toCharArray();
            for (char aChar: chars) {
                countOfAlphabet[i][aChar-'a']++;
                alphabetLocationSets[aChar-'a'].add(i);
            }
        }

        for (char c : targetChars) {
            if (alphabetLocationSets[c - 'a'].size()==0) {
                // char not in any sticker
                return -1;
            }
        }
        // loop dp array
        for (int i =0;i < dpLen-1;i++) {
            if (i !=0 && dp[i] == 0) continue;
            int  start = 0;
            for (;start < targetLength;start++) {
                // find the first match letter to concated   i -> string
                if (((1<<start) & i) == 0) {
                    break;
                }
            }
            final Set<Integer> set = alphabetLocationSets[targetChars[start] - 'a'];
            for (Integer idx: set) {
                int next = i; // bitmap
                final int[] arr = Arrays.copyOf(countOfAlphabet[idx],26);
                for (int  startIndex = start;startIndex < targetLength;startIndex++) {
                    final  char ch =targetChars[startIndex];
                    if (((1<<startIndex) & next) == 0 && arr[ch - 'a']>0) {
                        arr[ch -'a']--;
                        next |= (1<< startIndex);
                    }
                }
                dp[next] = dp[next] ==0 ? dp[i] +1 : Math.min(dp[next],dp[i]+1);

            }
        }
        return dp[dpLen-1];
    }
}