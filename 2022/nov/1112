/**
 * You are currently leading a team to develop a new product. Unfortunately,
 * the latest version of your product fails the quality check. Since
 * each version is developed based on the previous version, all the versions
 * after a bad version are also bad.
 *
 * Suppose you have n versions [1, 2, ..., n] and you want to find out the
 * first bad one, which causes all the following ones to be bad.
 *
 * You are given an API bool isBadVersion(version) which will return whether
 * version is bad. Implement a function to find the first bad version. You
 * should minimize the number of calls to the API.
 *
 * E.g.
 * 1 2 3 4 5 6 7 8 9 10
 * G G G B B B B B B B
 */

public class SolutionFirstBadVersion {
    private static int FIRST_BAD = 4;
    private static boolean isBadVersion(int version) {
        if (version >= FIRST_BAD) {
            return true;
        }
        return false;
    }

    private static int firstBadVersion(int n) {
        int low = 0, high = n;
        while (low < high) {
            int mid = (low + high) / 2;
            if (isBadVersion(mid)) high = mid;
            else low = mid +1;
        }
        return high;
    }

    public static void main(String[] args) {
        int rst = firstBadVersion(10);
        System.out.println(rst);
    }
}


// Time Complexity O(logN)
// Space Complexity O(1)

import java.util.ArrayList; // option + return auto-complete imports
import java.util.List;


/**
 * Given a SORTED integer array where the range of elements are in the INCLUSIVE range
 * [lower, upper], return its missing ranges.
 * <p>
 * For example,
 * given [0, 1, 3, 50, 75], lower = 0 and upper = 99,
 * return ["2", "4->49", "51->74", "76->99"]
 */
public class SolutionMissingRanges {
    private static List<String> findMissingRanges(int[] nums, int lower, int upper) {
        // Step1: Define return value
        List<String> rst = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            addToList(rst, lower, upper);
            return rst;
        }
        addToList(rst, lower, nums[0] - 1);
        // two pointers
        int prev = nums[0];
        int i = 1;
        while (i < nums.length) {
            int cur = nums[i];
            if (cur != prev + 1) {
                addToList(rst, prev + 1, cur - 1);
            }
            prev = cur;
            i += 1;
        }
        addToList(rst, nums[nums.length - 1] + 1, upper);
        return rst;

    }

    // Supporting method
    public static void addToList(List<String> rst, int start, int end) {
        if (start == end) {
            rst.add(String.valueOf(start));
        } else if (start < end) {
            rst.add(start + "->" + end);
        }
    }


    public static void main(String[] args) {
        int[] nums = {0, 1, 3, 50, 75};
        int lower = 0;
        int upper = 99;
        List<String> rst = SolutionMissingRanges.findMissingRanges(nums, lower, upper);
        System.out.println(rst.toString());
    }

    // Time complexity: O(n)

}

