https://leetcode.cn/problems/minimum-number-of-refueling-stops/

class Solution {
    public int minRefuelStops(int target, int startFuel, int[][] stations) {
            int N = stations.length;
            long[] dp = new long[N+1];
            dp[0] = startFuel;
            for (int i = 0;i < N;i++) {
                for (int j = i;j>=0;j--) {
                    if (dp[j] >= stations[i][0]) {
                        dp[j+1] = Math.max(dp[j+1],dp[j] + stations[i][1] );
                    }
                }
            }
            for (int i = 0;i < N+1;i++) {
                if (dp[i] >=target) return i;
            }
            return -1;

    }
}

class Solution {
    public int minRefuelStops(int target, int startFuel, int[][] stations) {
        int tank = startFuel;
        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        int res = 0, prev = 0;// prev is last station distance to the start point
        for  (int[]  station:stations) {
            int  location= station[0];
            int capacity = station[1];
            tank -= location - prev; // current st to prev station distance
            while (!pq.isEmpty() && tank <0) {
                tank += pq.poll();
                res++;
            }
            if (tank < 0) return -1;
            pq.offer(capacity);
            prev = location;
        }
        tank -= target - prev;
        while (!pq.isEmpty() && tank < 0) {
            tank += pq.poll();
            res++;
        }
        if  (tank < 0) return -1;
        return res;
    }
}
