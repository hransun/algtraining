https://leetcode.cn/problems/length-of-longest-fibonacci-subsequence/

class Solution {
    public int lenLongestFibSubseq(int[] arr) {
        int[] A = arr;
        int N = A.length;
        Set<Integer> S = new HashSet<>();
        for (int x : A) S.add(x);
        int res = 0;
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                int x = A[j];
                int y = A[j] + A[i];
                int length = 2;
                while (S.contains(y)) {
                    int tmp = y;
                    y = x + y;
                    x = tmp;
                    res = Math.max(res, ++length);
                }
            }
        }
        return res>=3? res: 0;
    }
}

class Solution(object):
    def lenLongestFibSubseq(self, arr):
        """
        :type arr: List[int]
        :rtype: int
        """
        A = arr
        index = {x:i for i, x in enumerate(A)}
        longest = collections.defaultdict(lambda:2)
        
        ans = 0
        for k , z  in enumerate(A):
            for j in range(k):
                i = index.get(z - A[j],None)
                if i is not None and i < j:
                    candidate = longest[j,k] = longest[i,j] +1
                    ans = max(ans,candidate)
        return ans