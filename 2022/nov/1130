https://leetcode.cn/problems/shortest-palindrome/

class Solution {
    public String shortestPalindrome(String s) {
        char[] chars = s.toCharArray();
        StringBuilder sb = new StringBuilder();
        int length = chars.length;
        for (int i = length-1; i >0 ; i--) {
            if (isPalindrome(chars,0,i)) break;
            sb.append(chars[i]);
        }
        return sb.append(s).toString();

    }
    public boolean isPalindrome(char[] chars,int start,int end) {
        for (; start< end ; start++,end--) {
            if (chars[start] != chars[end]) return false;
        }
        return true;
    }
}


class Solution {
    public String shortestPalindrome(String s) {
        if (s == null ||s.length()==1) return s;
        char[] chars = s.toCharArray();
        char[] newChars = preProcess(chars); // add chars to do manacher
        int n = newChars.length;
        int[] results = new int[n];
        int center = 0;
        int right =0;
        int  longestLength =0 ;// var to calculate longest palindrome str from start
        for (int i = 1; i <n-1 ; i++) { // don't care first and last added char
            int i_mirror = 2 * center - i; // i - center = center - i-mirror
            if  (i < right) {
                // 如果i不不超过右边界， results[i] 取 right – i 与 results[i_mirror] 的较⼩小值
                // 因为实际是 I 为中心， 如果大就超过半径，右边界了
                results[i] = Math.min(results[i_mirror],right - i );
            } else results[i] = 0;

            while (newChars[i + 1 + results[i]] == newChars[i-1-results[i]])
                //以i为中⼼心， results[i]为半径再扩展⽐比对，并更更新results[i]
                results[i]++;
            //如果 i+result[i] 超过右边界，则更更新 center 和 right (拉⻋)
            if (i + results[i] > right) {
                center = i;
                right = i +results[i];
            }
            // find the longest palindrom from start position
            if (results[i] == i -1) longestLength = results[i];// i-1 because ignore first added extra letter by ma-la-che

        }
        StringBuilder sb = new StringBuilder();
        for (int i = chars.length-1; i >=longestLength; i--) {
            sb.append(chars[i]);
        }
        return sb.append(s).toString();


    }
    public char[] preProcess(char[] chars) {
        int n = chars.length;
        int index = 0;
        char[] newChars = new char[2*n + 3];
        newChars[index++] = '^';
        for (int i = 0; i < n; i++) {
            newChars[index++] = '#';
            newChars[index++] = chars[i];
        }
        newChars[index++] = '#';
        newChars[index++] = '$';
        return newChars;

    }
}