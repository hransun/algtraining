https://leetcode.cn/problems/longest-palindromic-substring/

class Solution {
    public String longestPalindrome(String s) {
        int  maxLength = 1;
        int left = 0;
        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            for (int j = i+1; j < chars.length; j++) {
                if (isPalindrome(chars,i,j) && (j - i +1) > maxLength) {
                    maxLength = j - i +1;
                    left = i;
                }

            }

        }
        return new String(chars,left,maxLength);

    }
    private boolean isPalindrome(char[] chars, int  start, int end) {
        while (start < end) {
            if (chars[start++] != chars[end--]) {
                return  false;
            }
        }
        return  true;
    }
}

class Solution {
    public String longestPalindrome(String s) {
        if (s == null || s.length() == 1) {
            return s;
        }
        int n = s.length();
        int maxLength = 1;
        int left = 0;
        char[] chars = s.toCharArray();
        boolean[][] dp = new boolean[n][n]; // sub array start i ,  end j dp[i][j]
        for (int  subLen = 1; subLen <=n;  subLen++) {
            for (int i = 0; i + subLen-1 < n; i++) { // loop start point
                int j = i + subLen -1; // end point because sublen including i and j
                if (subLen == 1) {
                    dp[i][j] = true;
                } else if (subLen == 2) {
                    dp[i][j] = (chars[i] == chars[j]);
                } else {
                    dp[i][j] = (chars[i] == chars[j] && dp[i+1][j-1] );
                }
                if (dp[i][j] && subLen > maxLength) {
                    maxLength = subLen;
                    left = i;
                }
            }
        }
        return new String(chars,left,maxLength);

    }
}

class Solution {
    public String longestPalindrome(String s) {
        char[] chars = s.toCharArray();
        int start = 0,  maxLen = 1;
        for (int i  = 0; i < chars.length ; i++) {
            int len1 = expandAroundCenter(chars,i,i);
            int len2 = expandAroundCenter(chars,i,i+1);
            int len = Math.max(len1,len2);
            if (len >  maxLen) {
                // if even , if odd :len -1 then devided by 2
                start = i -  (len -1)/2; // center - half of the lenth -1
                maxLen = len;
            }

        }
        return new String(chars,start,maxLen);
    }
    public int  expandAroundCenter(char[] chars  , int left, int right) {
        while (left >=0 && right < chars.length && chars[left] == chars[right]) {
            left--;
            right++;
        }
        return right - left -1; // right - left +1 - 2 (remove two pos of last loop which is not good)
    }
}


class Solution {
    public String longestPalindrome(String s) {
        char[] chars = s.toCharArray();
        char[] newChars = preProcess(chars); // add chars to do manacher
        int n = newChars.length;
        int[] results = new int[n];
        int center = 0;
        int right =0;
        for (int i = 1; i <n-1 ; i++) { // don't care first and last added char
            int i_mirror = 2 * center - i; // i - center = center - i-mirror
            if  (i < right) {
               // 如果i不不超过右边界， results[i] 取 right – i 与 results[i_mirror] 的较⼩小值
                // 因为实际是 I 为中心， 如果大就超过半径，右边界了
                results[i] = Math.min(results[i_mirror],right - i );
            } else results[i] = 0;

            while (newChars[i + 1 + results[i]] == newChars[i-1-results[i]])
                //以i为中⼼心， results[i]为半径再扩展⽐比对，并更更新results[i]
                results[i]++;
            //如果 i+result[i] 超过右边界，则更更新 center 和 right (拉⻋)
            if (i + results[i] > right) {
                center = i;
                right = i +results[i];
            }

        }
        int maxLen = 0;
        int centerIndex  = 0;
        for (int i = 1; i < n-1; i++) { // remove head and tail
            if (results[i] >  maxLen) {
                maxLen = results[i];
                centerIndex = i;
            }

        }
        int  start = (centerIndex - maxLen) /2;// because have  additional  chars 
        return new String(chars,start,maxLen);


    }
    public char[] preProcess(char[] chars) {
        int n = chars.length;
        int index = 0;
        char[] newChars = new char[2*n + 3];
        newChars[index++] = '^';
        for (int i = 0; i < n; i++) {
            newChars[index++] = '#';
            newChars[index++] = chars[i];
        }
        newChars[index++] = '#';
        newChars[index++] = '$';
        return newChars;

    }
}