https://leetcode.cn/problems/number-of-longest-increasing-subsequence/

class Solution {
    public int findNumberOfLIS(int[] nums) {
        int N = nums.length;
        int[] sort = nums.clone();
        Arrays.sort(sort);
        Map<Integer,Integer> map = new HashMap<>();
        for (int i = 0;i < N;i++) {
            map.put(sort[i], i+1);
        }
        BITree tree = new BITree(N);
        for (int num: nums) {
            int id = map.get(num); // id is the index of original array
            int[] q  = tree.getSum(id-1) ;// before id lis and counter
            tree.update(id,q[0]+1,q[1]) ;//  length and counter
        }
        return tree.getSum(N)[1];

    }
}

class BITree {
    int[] sums;
    int[]  lens;
    public BITree(int n) {
        sums= new int[n+1];
        lens = new int[n+1];
    }

    // x is  length of LIS, c is  counter
    public void update(int id , int x , int c) {
        for (int i = id;i < sums.length;i +=lowbit(i)) {
            // lens[i] is original LIS  , x is current
            if (lens[i]==x) {
                sums[i] += c;
            }
            else if (lens[i] <  x) {
                lens[i] = x;
                sums[i] = c;
            }
        }
    }

    public  int[] getSum(int id) {
        int x = 0; // LIS length
        int c = 1; // counter
        for (int i = id;i >=1;i-=lowbit(i)) {
            if  (lens[i] > x) {
                c = sums[i];
                x = lens[i];
            }  else if (lens[i] == x) {
                c += sums[i];
            }
        }
        return  new int[] {x,c};
    }

    public int  lowbit(int x) {
        return x & (-x);
    }
}

https://leetcode.cn/problems/profitable-schemes/

class Solution {
    // G total men,  at least P profits
    public int profitableSchemes(int G, int P, int[] groups, int[] profits) {
        int Mod = 1_000_000_007;
        int N = groups.length;
        int[][] counts = new int[G+1][P+1];
        for (int g =0;g <=G;g++) {
            counts[g][0] = 1;
        }
        for (int n = 0;n < N;n++) {
            //loop each criminal group
            int  group = groups[n], profit = profits[n];
            for (int g = G;g>=group;g--) {
                long count = counts[g][P];
                for (int p =  Math.max(0,P-profit);p<= P;p++) {
                    count += counts[g-group][p];
                }
                counts[g][P] = (int)(count % Mod);
                for (int p = P-1;p >=profit;p--) {
                    counts[g][p] = (counts[g][p] +  counts[g-group][p-profit]) % Mod;
                }

            }
        }
        return counts[G][P];

    }
}