https://leetcode.cn/problems/add-two-numbers/submissions/

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        p , q = l1 , l2
        result_head = ListNode(-1)
        curr = result_head
        carry = 0
        while (p != None or q != None):
            x = p.val if p != None else 0
            y = q.val if q != None else 0
            sum = carry + x + y 
            num = sum % 10
            carry = sum //10
            curr.next = ListNode(num)
            curr = curr.next 

            p = p.next if p != None else p
            q = q.next if q != None else q 
        
        if carry > 0:
            curr.next = ListNode(carry)
        
        return result_head.next 


https://leetcode.cn/problems/remove-outermost-parentheses/

class Solution {
    public String removeOuterParentheses(String s) {
        int len = s.length();
        List<String> list = new ArrayList<>();
        int left = 0, right = 0, lastOpr = 0;
        for (int i = 0; i < len; i++) {
            char c = s.charAt(i);
            if (c == '(') {
                left++;
            }
            else if (c== ')') {
                right++;
            }
            if (left == right) {
                list.add(s.substring(lastOpr, i +1));
                lastOpr = i +1;
            }


        }
        StringBuilder sb = new StringBuilder();
        for (String s1:list) {
            sb.append(s1.substring(1,s1.length()-1));
        }
        return sb.toString();

    }
}
