https://leetcode.com/problems/find-k-th-smallest-pair-distance/

class Solution {
    public int smallestDistancePair(int[] nums, int k) {
        Arrays.sort(nums);
        int lo = 0;
        int hi = nums[nums.length-1] - nums[0];
        while (lo < hi) {
            int mi = (lo + hi) / 2;
            int count = 0, left = 0;
            for (int right = 0; right < nums.length; ++right) {
                while (nums[right] - nums[left] > mi) {
                    left++;

                }
                count += right - left;
            }
            if (count >=k) hi = mi;
            else lo = mi +1;
        }
        return  lo;
        
    }
}

https://leetcode.cn/problems/route-between-nodes-lcci/submissions/

class Solution {
    public boolean findWhetherExistsPath(int n, int[][] graph, int start, int target) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<ArrayList<Integer>>(n);
        for (int i =0;i < n;i++) {
            adj.add(new ArrayList<Integer>());
        }

        for (int i =0;i < graph.length;i++) {
            adj.get(graph[i][0]).add(graph[i][1]);
        }
        Queue<Integer> node_queue = new LinkedList<Integer>();
        boolean[] visited = new boolean[n];
        node_queue.add(start);
        while (!node_queue.isEmpty()) {
            int cur_vert = node_queue.poll();
            for (int j = 0;j < adj.get(cur_vert).size();j++) {
                int  vert = adj.get(cur_vert).get(j);// get nei
                if (!visited[vert]) {
                    visited[vert] = true;
                    if (vert == target) return true;
                    node_queue.add(vert);
                }
            }
        }
        return false;

    }
}