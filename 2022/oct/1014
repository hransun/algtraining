https://leetcode.cn/problems/number-of-islands/

import java.util.LinkedList;
import java.util.Queue;

//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }
        int gridLen = grid.length;
        int gridWid = grid[0].length;
        int  numIslands = 0;

        int[][] dirs = {{-1,0},{1,0},{0,1},{0,-1}};

        for (int r = 0;r < gridLen;r++) {
            for (int c = 0;c < gridWid; c++){
                if (grid[r][c] == '1') {
                    Queue<int[]> neighbors =  new LinkedList<>();
                    neighbors.add(new int[] {r,c});
                    grid[r][c] = '0';
                    while (!neighbors.isEmpty()) {
                        int[] pos = neighbors.poll();
                        int row = pos[0], col = pos[1];
                        for (int[] dir : dirs) {
                            int nr = row + dir[0],nc = col + dir[1];
                            if (nr >= 0 && nr < gridLen && nc >=0 && nc < gridWid && grid[nr][nc] == '1') {
                                neighbors.add(new int[] {nr,nc});
                                grid[nr][nc] = 0;
                            }
                        }
                    }
                    // bfs end
                    numIslands++;
                }

            }
        }
        return numIslands;
    }
}
//leetcode submit region end(Prohibit modification and deletion)



//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }
        int gridLen = grid.length;
        int gridWid = grid[0].length;
        int  numIslands = 0;

        for (int r = 0;r < gridLen;++r) {
            for (int c =0;c < gridWid; ++c) {
                if (grid[r][c] == '1') {
                    dfs(grid,r,c);
                    // end of dfs
                    ++ numIslands;
                }
            }
        }
        return numIslands;

        
    }
    void dfs(char[][] grid,int r,  int c) {
        int gridLen = grid.length;
        int gridWid = grid[0].length;
        if (r < 0 || c <0 || r >= gridLen || c >= gridWid || grid[r][c] != '1') {
            return ;
        }
        grid[r][c] = '0';
        dfs(grid,r+1,c);
        dfs(grid,r-1,c);
        dfs(grid,r,c+1);
        dfs(grid,r,c-1);
    }
}
//leetcode submit region end(Prohibit modification and deletion)
