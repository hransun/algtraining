https://leetcode.com/problems/design-add-and-search-words-data-structure/


class WordDictionary {
    HashMap<Integer,HashSet<String>> map;
    public WordDictionary() {
        map = new HashMap<>();
    }
    
    public void addWord(String word) {
        int n = word.length();
        if (map.containsKey(n)) {
            HashSet<String> set = map.get(n);
            set.add(word);
        } else {
            HashSet<String> set = new HashSet<>();
            set.add(word);
            map.put(n,set);
        }
    }
    
    public boolean search(String word) {
        HashSet<String> set = map.getOrDefault(word.length(),new HashSet<String>());
        if (set.contains(word)) return true;
        for (String s : set) {
            if (equal(s,word)) {
                return true;
            }

        }
        return false;
    }

    private boolean equal(String s, String word) {
        char[] c1 = s.toCharArray();
        char[] c2 = word.toCharArray();
        int n1 = s.length(),n2 = word.length();
        if (n1 != n2) return false;
        for (int i = 0;i < n1;++i) {
            if (c1[i] != c2[i] && c2[i] != '.') return false;
        }
        return true;
    }
}

class WordDictionary {
    HashSet<String> set;
    public WordDictionary() {
        set = new HashSet<>();
    }
    
    public void addWord(String word) {
        set.add(word);
    }
    
    public boolean search(String word) {
        if (set.contains(word)) return true;
        for (String s : set) {
            if (equal(s,word)) {
                return true;
            }

        }
        return false;
    }

    private boolean equal(String s, String word) {
        char[] c1 = s.toCharArray();
        char[] c2 = word.toCharArray();
        int n1 = s.length(),n2 = word.length();
        if (n1 != n2) return false;
        for (int i = 0;i < n1;++i) {
            if (c1[i] != c2[i] && c2[i] != '.') return false;
        }
        return true;
    }
}


class WordDictionary {
    class TrieNode {
        TrieNode[] children;
        boolean isWord;
        public TrieNode() {
            children = new TrieNode[26];
            isWord = false;
            for (int i = 0;i < 26; i++) {
                children[i] = null;
            }
        }
    }
    TrieNode root;

    public WordDictionary() {
        root = new TrieNode();
    }
    
    public void addWord(String word) {
        char[] array = word.toCharArray();
        TrieNode cur = root;
        for (int i=0;i < array.length;++i) {
            if (cur.children[array[i] - 'a'] == null) {
                cur.children[array[i] - 'a'] = new TrieNode();
            }
            cur = cur.children[array[i] - 'a'];
        }
        cur.isWord = true;

    }
    
    public boolean search(String word) {
        return searchHelp(word,root);

    }
    private boolean searchHelp(String word, TrieNode root) {
        char[] array = word.toCharArray();
        TrieNode cur = root;
        for (int i = 0;i < array.length;++i) {
            if (array[i] == '.') {
                for (int j = 0;j < 26;++j) {
                    if (cur.children[j] != null) {
                        if (searchHelp(word.substring(i+1),cur.children[j])) {
                            return true;
                        }
                    }
                }
                return false;
            }
            if (cur.children[array[i]- 'a']== null) {
                return false;
            }
            cur = cur.children[array[i] - 'a'];
        }
        return cur.isWord;
    }


}