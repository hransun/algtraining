https://leetcode.com/problems/number-of-islands/


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    class UniorFindSet{
        int[] parent;
        int[] rank;
        int  count;

        public UniorFindSet(char[][] grid) {
            count = 0;
            int m = grid.length;
            int n = grid[0].length;
            parent = new int[m * n];
            rank = new int[m * n];
            for (int i = 0;i < m ;++i) {
                for (int j = 0;j < n; ++j) {
                    int value = hash(i,j,n);
                    if (grid[i][j] == '1') {
                        parent[value] = value;
                        rank[value] = 1;
                        ++count;
                    }
                }
            }
        }

        public int hash(int i ,  int j, int  constant) {
            return i * constant + j;

        }

        public int find(int i) {
            if (parent[i] != i) {
                parent[i] =  find(parent[i]);
            }
            return parent[i];
        }

        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX != rootY) {
                if (rank[rootX] > rank[rootY]) {
                    parent[rootY] = rootX;
                }
                else if (rank[rootX] < rank[rootY]) {
                    parent[rootX] = rootY;
                }
                else {
                    parent[rootY] =  rootX;
                    rank[rootX] += 1;
                }
                --count;
            }
        }

        public int getCount() {
            return count;
        }


    }



    public int numIslands(char[][] grid) {
        if (grid == null || grid.length ==0 ) {
            return 0;
        }

        int gridLen = grid.length;
        int gridWid = grid[0].length;
        UniorFindSet uf = new UniorFindSet(grid);
        for (int r = 0;r < gridLen;r++) {
            for (int c = 0;c < gridWid; c++) {
                if (grid[r][c] == '1') {
                    grid[r][c] = '0';
                    if (r -1 >=0 && grid[r-1][c] == '1') {
                        uf.union(uf.hash(r-1,c,gridWid),uf.hash(r,c,gridWid));
                    }
                    if (r + 1 < gridLen && grid[r+1][c] == '1') {
                        uf.union(uf.hash(r+1,c,gridWid),uf.hash(r,c,gridWid));
                    }
                    if (c -1 >=0 && grid[r][c-1] == '1') {
                        uf.union(uf.hash(r,c-1,gridWid),uf.hash(r,c,gridWid));
                    }
                    if (c+1 < gridWid && grid[r][c+1] == '1') {
                        uf.union(uf.hash(r,c+1,gridWid),uf.hash(r,c,gridWid));
                    }
                }
            }
        }
        return uf.getCount();
    }
}
//leetcode submit region end(Prohibit modification and deletion)
