https://leetcode.cn/problems/matchsticks-to-square/

class Solution {
    public List<Integer> nums;
    public int[] sums;
    public int possibleSquareSide;
    public Solution() {
        this.sums = new int[4];
    }
    public boolean makesquare(int[] matchsticks) {
        int[] nums = matchsticks;
        if (nums == null || nums.length < 4) {
            return false;
        }
        int L = nums.length;
        int sum =0;
        for (int i =0;i < nums.length;i++) {
            sum += nums[i];
        }
        this.possibleSquareSide = sum / 4;
        this.nums = Arrays.stream(nums).boxed().collect(Collectors.toList());
        return this.dfs(0);
    }

    public boolean dfs(int index) {
        if (index ==  this.nums.size()) {
            return sums[0] == sums[1] &&
                    sums[1] == sums[2] &&
                    sums[2] == sums[3];
        }
        int element = this.nums.get(index);
        for (int i =0;i < 4;i++) {
            this.sums[i] += element;
            if (dfs(index+1))   {
                return  true;
            }
            sums[i] -= element;
        }
        return false;
    }
}

class Solution {
    public List<Integer> nums;
    public int[] sums;
    public int possibleSquareSide;
    public Solution() {
        this.sums = new int[4];
    }
    public boolean makesquare(int[] matchsticks) {
        int[] nums = matchsticks;
        if (nums == null || nums.length < 4) {
            return false;
        }
        int L = nums.length;
        int sum =0;
        for (int i =0;i < nums.length;i++) {
            sum += nums[i];
        }
        // pruning
        if (sum % 4 !=0) return false;
        this.possibleSquareSide = sum / 4;
        this.nums = Arrays.stream(nums).boxed().collect(Collectors.toList());
        // select large  size stick first
        Collections.sort(this.nums,Collections.reverseOrder());
        return this.dfs(0);
    }

    public boolean dfs(int index) {
        if (index ==  this.nums.size()) {
            return sums[0] == sums[1] &&
                    sums[1] == sums[2] &&
                    sums[2] == sums[3];
        }
        int element = this.nums.get(index);
        for (int i =0;i < 4;i++) {
            if (this.sums[i] > this.possibleSquareSide) return false;
            this.sums[i] += element;
            if (dfs(index+1))   {
                return  true;
            }
            sums[i] -= element;
        }
        return false;
    }
}

class Solution {
    public boolean makesquare(int[] matchsticks) {
        int[] nums = matchsticks;
        if (nums.length < 4) {
            return false;
        }
        int sum = 0;
        for (int i = 0;i < nums.length;++i) {
            sum += nums[i];
        }
        if (sum % 4 != 0) {
            return false;
        }
        int target = sum / 4;
        ArrayList<Integer> validSubset = new ArrayList<>();
        ArrayList<Integer> validHalfSubset = new ArrayList<>();
        int all = 1 << nums.length;
        for (int i = 1;i < all;i++) {
            int  bucketSum = 0;
            for (int j = 0;j < nums.length;j++) {
                if ((i & (1<<j)) != 0) {
                    bucketSum += nums[j];
                }
            }
            if (bucketSum == target) {
                validSubset.add(i);
            }
        }
        for (int i = 0;i < validSubset.size();i++) {
            for (int j = i+1;j < validSubset.size();j++){
                if ((validSubset.get(i) & validSubset.get(j)) == 0)  {
                    validHalfSubset.add(validSubset.get(i) |
                            validSubset.get(j));
                }
            }
        }

        for (int i = 0;i < validHalfSubset.size();i++) {
            for (int j = i+1;j < validHalfSubset.size();j++) {
                if  ((validHalfSubset.get(i) & validHalfSubset.get(j)) == 0) {
                    return true;
                }
            }
        }
        return false;

    }
}