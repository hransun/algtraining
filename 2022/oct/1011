https://leetcode.cn/problems/network-delay-time/submissions/

class Solution(object):
    def networkDelayTime(self, times, n, k):
        """
        :type times: List[List[int]]
        :type n: int
        :type k: int
        :rtype: int
        """
        N, K = n,k
        graph = collections.defaultdict(list)
        for u, v ,  w in times:
            graph[u].append((v,w))
        dist = {node: float('inf') for node in range(1,N+1)}
        dist[K] = 0
        visited = [False] * (N+1)
        
        while True:
            cand_node = -1
            cand_dist = float('inf')
            for i in range(1,N+1):
                if not visited[i] and dist[i] < cand_dist:
                    cand_dist = dist[i]
                    cand_node = i
            if cand_node < 0:
                break
            visited[cand_node] = True
            for nei, d in graph[cand_node]:
                dist[nei] = min(dist[nei],dist[cand_node] + d )
        ans = max(dist.values())
        return ans if ans < float('inf') else -1


https://leetcode.com/problems/longest-increasing-path-in-a-matrix/


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    public int[][] dirs = {{-1,0},{1,0},{0,-1}, {0,1}};
    public int rows , columns;
    public int longestIncreasingPath(int[][] matrix) {
        if (matrix.length ==0 || matrix[0].length ==0) return 0;
        rows = matrix.length;
        columns = matrix[0].length;
        int ans =0;
        for (int i =0;i < rows;i++) {
            for (int j =0;j < columns; j++) {
                ans = Math.max(ans,dfs(matrix,i,j));
            }
        }
        return ans;
    }

    public int dfs(int[][] matrix,int row, int column) {
        int result = 1;
        for (int[]  dir : dirs) {
            int newRow = row + dir[0],  newColumn = column + dir[1];
            if (newRow >= 0 && newRow <rows && newColumn >=0 && newColumn < columns &&
                    matrix[newRow][newColumn] > matrix[row][column] ) {
                result = Math.max(result,dfs(matrix,newRow,newColumn) +1);
            }
        }
        return result;
    }
}
//leetcode submit region end(Prohibit modification and deletion)

from functools import lru_cache
class Solution(object):
    DIRS = [(-1,0),(1,0),(0,-1),(0,1)]
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        
        if not matrix:
            return 0
        @lru_cache(None)
        def dfs(row,column):
            best = 1
            for dx,dy in Solution.DIRS:
                newRow, newColumn = row + dx,column + dy
                if 0 <= newRow <  rows and 0 <= newColumn < columns and matrix[newRow][newColumn] > matrix[row][column]:
                    best = max(best,dfs(newRow,newColumn) + 1)
            return best
        rows,columns = len(matrix),len(matrix[0])
        ans = 0
        for i in range(rows):
            for j in range(columns):
                ans = max(ans,dfs(i,j))
        return ans


class Solution {
    public int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    public int rows, columns;

    public int longestIncreasingPath(int[][] matrix) {
        if (matrix.length == 0 || matrix[0].length == 0) return 0;
        rows = matrix.length;
        columns = matrix[0].length;
        int[][] indegrees = new int[rows][columns];
        for (int i = 0;i < rows;i++) {
            for (int j =0;j < columns;j++) {
                for (int[] dir: dirs) {
                    int newRow = i + dir[0];
                    int newColumn = j + dir[1];
                    if (newRow >=0 && newRow < rows && newColumn >=0 && newColumn < columns && matrix[newRow][newColumn]
                            < matrix[i][j]) {
                        indegrees[i][j]++;
                    }
                }
            }
        }

        Queue<int[]> queue = new LinkedList<>();
        for (int i =0;i < rows;i++) {
            for (int j = 0;j < columns;j++) {
                if (indegrees[i][j] == 0) {
                    queue.offer(new int[] {i,j});
                }
            }
        }
        int ans = 0;
        while (!queue.isEmpty()) {
            ++ans;
            int size = queue.size();
            for (int i = 0;i < size;i++) {
                int[] cell = queue.poll();
                int row = cell[0],column = cell[1];
                for (int[] dir: dirs) {
                    int newRow = row + dir[0], newColumn = column + dir[1];
                    if (newRow >=0 && newRow < rows && newColumn >=0 && newColumn < columns && matrix[newRow][newColumn]
                            > matrix[row][column]) {
                        indegrees[newRow][newColumn]--;
                        if (indegrees[newRow][newColumn] == 0) {
                            queue.offer(new int[] {newRow,newColumn});
                        }
                    }

                }
            }
        }
        return ans;


    }
}
        
