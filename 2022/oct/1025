https://leetcode.com/problems/n-queens/

class Solution {
    public List<List<String>> solveNQueens(int n) {
        char[][] chess = new char[n][n];
        for  (int i =0;i < n;i++) {
            for (int j =0;j < n;j++) {
                chess[i][j] = '.';
            }
        }
        List<List<String>> res = new ArrayList<>();
        solve(res,chess,0);
        return  res;
        
    }

    private void  solve(List<List<String>> res,char[][] chess,int  row) {
        if (row == chess.length) {
            res.add(construct(chess));
            return;
        }
        for (int col =0;col < chess.length;col++) {
            if (valid(chess,row,col)) {
                char[][] temp = copy(chess);
                temp[row][col] = 'Q';
                solve(res,temp,row+1);
            }
        }
    }

    private boolean valid(char[][] chess,int row,int col) {
        // current col
        for (int i =0;i < row;i++) {
            if  (chess[i][col] == 'Q') {
                return false;
            }
        }
        // top right
        for (int i =row,j = col;i >=0 && j < chess.length ;i--,j++) {
            if (chess[i][j] == 'Q') {
                return false;
            }
        }
        // top left
        for (int i =row,j = col;i >=0 && j >=0  ;i--,j--) {
            if (chess[i][j] == 'Q') {
                return false;
            }
        }
        return true;
    }

    private char[][] copy(char[][] chess) {
        char[][] temp = new char[chess.length][chess[0].length];
        for (int i =0;i < chess.length;i++) {
            for (int j =0;j < chess[0].length;j++) {
                temp[i][j] = chess[i][j];
            }
        }
        return temp;
    }

    private List<String> construct(char[][] chess) {
        List<String> path = new ArrayList<>();
        for (int i =0;i < chess.length;i++) {
            path.add(new String(chess[i]));
        }
        return path;
    }
}


class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        
        def generateBoard():
            board = list()
            for i in range(n):
                # only one row list , reuse every time, set   col for current row
                row[queens[i]] = 'Q'
                board.append("".join(row))
                # restore row list and prepared for next use
                row[queens[i]]='.'
            return board
            
        def backtrack(row):
            if  row == n:
                board = generateBoard()
                solutions.append(board)
            else:
                for col in range(n):
                    if col in columns or row - col in  diagonal1 or  row + col in diagonal2:
                        continue
                    queens[row] = col
                    columns.add(col)
                    diagonal1.add(row-col)
                    diagonal2.add(row+col)
                    backtrack(row+1)
                    columns.remove(col)
                    diagonal1.remove(row-col)
                    diagonal2.remove(row+col)
                    
        solutions=[]
        queens = [-1] * n
        columns = set()
        diagonal1 = set()
        diagonal2 = set()
        row =  ["." ]*n
        backtrack(0)
        return solutions
        