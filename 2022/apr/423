https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/submissions/

class Solution(object):
    def longestIncreasingPath(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: int
        """
        m = len(matrix)
        n = len(matrix[0])
        dist = [[0 for _ in range(n)] for _ in range(m)]
        
        def valid(x,y):
            if x <0 or y <0 or x >= len(matrix) or y >= len(matrix[0]):
                return False
            return True

        def dfs(x,y):
            if dist[x][y] !=0:
                return dist[x][y]
            dist[x][y] = 1
            for i in range(4):
                nx = x + dx[i]
                ny = y + dy[i]
                if valid(nx,ny) and matrix[nx][ny] > matrix[x][y]:
                    dist[x][y] = max(dist[x][y], dfs(nx,ny)+1)
            return dist[x][y]

        dx =(-1,0,0,1)
        dy = (0,-1,1,0)
        ans =0 
        for i in range(m):
            for j in range(n):
                ans = max(ans,dfs(i,j))
        return ans 
        
        