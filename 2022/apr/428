https://leetcode-cn.com/problems/split-array-largest-sum/submissions/

class Solution(object):
    def splitArray(self, nums, m):
        """
        :type nums: List[int]
        :type m: int
        :rtype: int
        """
        def validate(nums,m,size):
            cur = 0 
            count  = 1
            for num in nums:
                if cur + num <=size:
                    cur += num
                else:
                    cur = num
                    count +=1
            return count

        left , right = 0 , 0
        for num in nums:
            left = max(num, left)
            right += num
        while left  < right:
            mid = (left + right) / 2
            if validate(nums,m,mid) >m :
                left = mid + 1 
            else:
                right = mid
        return left 
       
https://leetcode-cn.com/problems/minimum-number-of-days-to-make-m-bouquets/submissions/

class Solution(object):
    def minDays(self, bloomDay, m, k):
        """
        :type bloomDay: List[int]
        :type m: int
        :type k: int
        :rtype: int
        """
        
        def validate(bloomDay,m,k,now):
            bouquet = 0
            consecutive =0
            for bloom in bloomDay:
                if bloom <= now:
                    consecutive +=1
                    if consecutive == k:
                        bouquet +=1
                        consecutive =0
                else:
                    consecutive = 0 
            return bouquet >=m





        left  =0 
        right  =0
        lastBloom = 0 
        for day in bloomDay:
            lastBloom = max(lastBloom, day)
        right = lastBloom + 1
        while left  < right:
            mid = (left + right )/ 2
            if validate(bloomDay, m , k , mid):
                right = mid
            else:
                left = mid +1
        if right == lastBloom +1:
            return -1
        return left 

