https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/submissions/

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def __init__(self):
        self.ans = None
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        def dfs(root,p,q):
            if root is None:
                return None,None
            left_result = dfs(root.left,p,q)
            right_result = dfs(root.right,p,q)
            result = [None,None] # [have p? , have q ?]
            result[0] = left_result[0] or right_result[0] or root.val == p.val
            result[1] = left_result[1] or right_result[1] or root.val == q.val
            # first time both p , q exist
            if result[0] and result[1] and self.ans is None:
                self.ans = root
            # tail recursion
            return result
        
        dfs(root,p,q)
        return self.ans 
        
        
        