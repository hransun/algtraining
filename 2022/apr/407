https://leetcode-cn.com/problems/container-with-most-water/submissions/

class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        ans =0
        i , j = 0 , len(height) -1
        while i < j:
            ans = max(ans, (min(height[i], height[j]))* (j - i))
            if height[i] < height[j]:
                i+=1
            else:
                j-=1
        return ans 

https://leetcode-cn.com/problems/subsets/

class Solution(object):
    
    def subsets(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        ans =[]
        self.helper(nums,0,[],ans)
        return ans 
        
    def helper(self,nums,index,current,ans):
        if index == len(nums):
            ans.append(current[:])
            return 
        current.append(nums[index])
        self.helper(nums,index +1 , current,ans)
        current.pop()
        self.helper(nums,index +1 , current,ans)