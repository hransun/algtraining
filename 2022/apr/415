https://leetcode-cn.com/problems/n-ary-tree-level-order-traversal/submissions/

"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""

class Solution(object):
    def levelOrder(self, root):
        """
        :type root: Node
        :rtype: List[List[int]]
        """
        q = collections.deque()
        q.append((root,0))
        seq =[]
        if not root:
            return seq 
        while q:
            current = q.popleft()
            node , depth = current[0], current[1]
            if depth >= len(seq):
                seq.append([])
            seq[depth].append(node.val)
            for c in node.children:
                q.append((c,depth+1))
        return seq

https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/submissions/

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        # l1, r1 -> pre order ; l2, r2 -> in order
        def build(l1,r1,l2,r2):
            
            if l1 > r1:
                return None
            root = TreeNode(preorder[l1])
            mid = l2
            while inorder[mid] != root.val:
                mid +=1
            root.left = build(l1+1,l1+(mid-l2),l2,mid-1)
            root.right = build(l1 + (mid- l2)+1,r1,mid+1,r2)

            return root

        return build(0,len(preorder)-1,0, len(inorder)-1)
