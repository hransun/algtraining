https://leetcode-cn.com/problems/successor-lcci/submissions/

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def inorderSuccessor(self, root, p):
        """
        :type root: TreeNode
        :type p: TreeNode
        :rtype: TreeNode
        """
        ans = None
        cur = root
        while cur is not None:

            if p.val == cur.val:
                if cur.right:
                    ans = cur.right
                    while ans.left:
                        ans = ans.left
                break

            elif p.val > cur.val:
                cur = cur.right

            else:# p.val < cur.val , should be in cur parents node   
                if ans is None or ans.val > cur.val:
                    ans = cur       
                cur = cur.left

        return ans 

https://leetcode-cn.com/problems/delete-node-in-a-bst/submissions/

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def deleteNode(self, root, key):
        """
        :type root: TreeNode
        :type key: int
        :rtype: TreeNode
        """
        if root is None:
            return root
        if root.val == key:
            if root.left is None:
                return root.right
            if root.right is None:
                return root.left
            next = root.right
            while next.left is not None:
                next = next.left
            root.right = self.deleteNode(root.right,next.val)
            root.val = next.val 
            return root

        if root.val < key:
            root.right = self.deleteNode(root.right,key)
        else:
            root.left = self.deleteNode(root.left,key)
        
        return root

https://leetcode-cn.com/problems/binary-search/submissions/

class Solution(object):
    def search(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: int
        """
        left , right = 0 , len(nums)-1
        # if only one element in array you have to use = to jump to the loop. 
        while left <= right:
            mid = (left + right)/2
            if nums[mid] == target:
                return mid 
            elif nums[mid]> target:
                right = mid-1
            else:
                left = mid +1
        
        return -1