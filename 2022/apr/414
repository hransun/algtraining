https://leetcode-cn.com/problems/binary-tree-inorder-traversal/submissions/

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def inorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        def dfs(node):
            if node is None:
                return 
            dfs(node.left)
            ans.append(node.val)
            dfs(node.right)

        ans = []
        dfs(root)
        return ans

https://leetcode-cn.com/problems/n-ary-tree-preorder-traversal/submissions/

"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""

class Solution(object):

    def preorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        def dfs(node):
            if node is None:
                return 
            ans.append(node.val)
            for c in node.children:
                dfs(c)
        
        ans =[]
        dfs(root)
        return ans 

"""
# Definition for a Node.
class Node(object):
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children
"""

class Solution(object):
    def preorder(self, root):
        """
        :type root: Node
        :rtype: List[int]
        """
        stack =[]
        ans =[]
        if not root:
            return ans 
        stack.append(root)
        while stack:
            node = stack.pop()
            ans.append(node.val)
            for i in reversed(range(len(node.children))):
                stack.append(node.children[i])
        return ans 
        