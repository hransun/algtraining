https://leetcode-cn.com/problems/maximum-subarray/

class Solution(object):
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        n = len(nums)
        s = [ 0 for _ in range(n+1)]
        
        preMin = [ 0 for _ in range(n+1)]
        ans = float('-inf')
        for i in range(1,n+1):
            s[i] = nums[i-1] + s[i-1]
        for i in range(1,n+1):
            preMin[i] = min(s[i],preMin[i-1]) 
        for i in range(1, n+1):
            ans = max(ans, s[i] - preMin[i-1])
        return ans 

https://leetcode-cn.com/problems/range-sum-query-2d-immutable/

class NumMatrix(object):

    def __init__(self, matrix):
        """
        :type matrix: List[List[int]]
        """
        n = len(matrix)
        m = len(matrix[0])
        self.sum = [[0] * (m+1) for _ in range(n+1)]
        for i in range(1,n+1):
            for j in range(1,m+1):
                self.sum[i][j] = self.sum[i-1][j] + self.sum[i][j-1] - self.sum[i-1][j-1] + matrix[i-1][j-1]


    def sumRegion(self, row1, col1, row2, col2):
        """
        :type row1: int
        :type col1: int
        :type row2: int
        :type col2: int
        :rtype: int
        """
        row1+=1
        col1 +=1
        row2+=1
        col2+=1
        return self.sum[row2][col2] - self.sum[row2][col1-1]  - self.sum[row1 -1][col2]+ self.sum[row1-1][col1 -1]



# Your NumMatrix object will be instantiated and called as such:
# obj = NumMatrix(matrix)
# param_1 = obj.sumRegion(row1,col1,row2,col2)
