https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/submissions/

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Codec:

    def serialize(self, root):
        """Encodes a tree to a single string.
        
        :type root: TreeNode
        :rtype: str
        """
        
        def dfs(seq,root):
            if root is None:
                seq.append("null")
                return 
            seq.append(str(root.val))
            dfs(seq,root.left)
            dfs(seq,root.right)
        
        seq =[]
        dfs(seq,root)
        #print(",".join(seq))
        return ",".join(seq)
        
    def __init__(self,cur = 0):
        self.cur = cur
    def deserialize(self, data):
        """Decodes your encoded data to tree.
        
        :type data: str
        :rtype: TreeNode
        """
        def restore(seq):
            if seq[self.cur]=="null":
                self.cur +=1
                return None
            root = TreeNode(seq[self.cur])
            self.cur +=1
            root.left = restore(seq)
            root.right = restore(seq)
            return root
        seq = data.split(',')
        #cur =0
        return restore(seq)

        

# Your Codec object will be instantiated and called as such:
# ser = Codec()
# deser = Codec()
# ans = deser.deserialize(ser.serialize(root))