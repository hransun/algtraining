https://leetcode.com/problems/longest-substring-without-repeating-characters/

class Solution {
    public int lengthOfLongestSubstring(String s) {
        if ( s== null || s.length()==0) return 0;
        Deque<Character> queue = new LinkedList<>();
        Set<Character> set =  new HashSet<>();
        int max = 0;
        for (char ch : s.toCharArray()) {
            // check duplicated first
            while (!set.add(ch)) {
                set.remove(queue.pollFirst());
            }
            queue.offerLast(ch);
            max = Math.max(max,queue.size());
        }
        return max;
        
    }
}


class Solution {
    public int lengthOfLongestSubstring(String s) {
        if ( s== null || s.length()==0) return 0;
        int start = 0;
        int end = 0;
        int[] map = new int[128];
        int max = 0;
        char[] chars = s.toCharArray();
        while (end < chars.length) {
            // check duplicated first
            while (map[chars[end]] > 0) {
                // already have it in the map
                map[chars[start++]]--;
            }
            map[chars[end++]]++;
            max = Math.max(max,end - start);
        }
        return max;
        
    }
}

https://leetcode.com/problems/3sum/

class Solution {
    public List<List<Integer>> threeSum(int[] array) {
        List<List<Integer>> res = new ArrayList<>();
        //int[] array = nums;
        if (array == null || array.length < 3) return res;
        Arrays.sort(array);
        int fix = 0; // fix 1 - left - right
        while (fix < array.length-2) {
            int left = fix +1;
            int  right = array.length -1;
            int rest = 0 - array[fix];
            while (left < right) {
                if (array[left] + array[right] == rest) {
                    List<Integer> list = new ArrayList<>();
                    list.add(array[fix]);
                    list.add(array[left++]); // won't out of bound when  remove  dup
                    list.add(array[right--]); // won't out of bound when remove dup
                    res.add(list);
                    // skip  duplicated element
                    // left > fix so left > 0
                    while (left < right &&  array[left] == array[left-1]) {
                        left++;
                    }
                    while (left < right && array[right] == array[right+1]) {
                        right--;
                    }
                }
                else if (array[left] + array[right] < rest) {
                    left++;
                } else {
                    right--;
                }
            }
            fix++;
            // remove dup
            while (fix < array.length - 2 && array[fix] == array[fix-1]) {
                fix++;
            }
        }
        return res;
        
    }
}
