https://leetcode.com/problems/binary-tree-inorder-traversal/

class Solution {
    List<Integer> res = new ArrayList<>();
    public List<Integer> inorderTraversal(TreeNode root) {
        helper(root);
        return  res;

        
    }
    void helper(TreeNode node) {
        // base case
        if (node == null) return;
        helper(node.left);
        res.add(node.val);
        helper(node.right);
    }
}

https://leetcode.com/problems/binary-tree-preorder-traversal/

class Solution {
    List<Integer> result =new ArrayList<>();
    public List<Integer> preorderTraversal(TreeNode root) {
        helper(root);
        return result;

    }
    private void helper(TreeNode root) {
        if (root == null) return;
        result.add(root.val);
        helper(root.left);
        helper(root.right);
    }
}

https://leetcode.com/problems/binary-tree-postorder-traversal/

class Solution {
    List<Integer> result =new ArrayList<>();
    public List<Integer> postorderTraversal(TreeNode root) {
        traversal(root);
        return result;
    }

    void traversal(TreeNode root) {
        if (root == null) return;
        traversal(root.left);
        traversal(root.right);
        result.add(root.val);
    }
}

