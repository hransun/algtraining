https://leetcode.com/problems/binary-tree-inorder-traversal/

class Solution {
    List<Integer> res = new ArrayList<>();
    public List<Integer> inorderTraversal(TreeNode root) {
        helper(root);
        return  res;

        
    }
    void helper(TreeNode node) {
        // base case
        if (node == null) return;
        helper(node.left);
        res.add(node.val);
        helper(node.right);
    }
}

https://leetcode.com/problems/binary-tree-preorder-traversal/

class Solution {
    List<Integer> result =new ArrayList<>();
    public List<Integer> preorderTraversal(TreeNode root) {
        helper(root);
        return result;

    }
    private void helper(TreeNode root) {
        if (root == null) return;
        result.add(root.val);
        helper(root.left);
        helper(root.right);
    }
}

// iteration way
class Solution {
    List<Integer> res =   new ArrayList<>();
    class Pair {
        int op; // 0 is visit, 1 = print or add to the  list
        TreeNode node;
        Pair(TreeNode node, int op) {
            this.node = node;
            this.op = op;
        }
    }
    public List<Integer> preorderTraversal(TreeNode root) {
        Stack<Pair> stack = new Stack<>();
        stack.add(new Pair(root,0));
        while (!stack.isEmpty()) {
            Pair temp = stack.pop();
            if (temp.node == null) continue;
            if (temp.op == 1) {
                res.add(temp.node.val);
                continue;
            } else { // access
                stack.add(new Pair(temp.node.right,0));
                stack.add(new Pair(temp.node.left,0));
                stack.add(new Pair(temp.node,1));
            }
        }
        return res;
        
    }
}


https://leetcode.com/problems/binary-tree-postorder-traversal/

class Solution {
    List<Integer> result =new ArrayList<>();
    public List<Integer> postorderTraversal(TreeNode root) {
        traversal(root);
        return result;
    }

    void traversal(TreeNode root) {
        if (root == null) return;
        traversal(root.left);
        traversal(root.right);
        result.add(root.val);
    }
}

