
https://leetcode.com/problems/top-k-frequent-elements/submissions/870053014/

class Solution {
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer,Integer> map = new HashMap<>();
        //  counter
        for (int num:nums) {
            map.put(num,map.getOrDefault(num,0)+1);
        }
        // lamda func to define comparator for heap.
        Queue<Integer> heap = new PriorityQueue<>((n1, n2) -> map.get(n1) - map.get(n2));
        for (int n:map.keySet()) {
            heap.add(n);
            if (heap.size()>k) heap.poll();
        }
        int[] rst = new int[k];
        for (int i = k-1;i >=0 ;i--) {
            rst[i] = (int)heap.poll();
        }
        return rst;
        
    }
}


https://leetcode.com/problems/summary-ranges/

class Solution {
    public List<String> summaryRanges(int[] nums) {
        List<String> rst = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            // record start point and end point is the point i
            int start = nums[i];
            // check if continue numbers for next num
            while (i + 1 < nums.length && nums[i + 1] == nums[i] + 1) { // if it's continue number
                i++;
            }
            // out of loop record start - > end(i)
            if (start == nums[i]) {
                rst.add("" + start);
            } else {
                rst.add(start + "->" + nums[i]);
            }

        }
        return rst;
    }
}