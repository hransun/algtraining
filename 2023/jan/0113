https://leetcode.com/problems/house-robber-iii/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

/**
 * This solution uses a depth-first search (DFS) to traverse the tree. 
 * The dfs function takes a tree node as input and returns an array of two integers.
 * The first element of the array represents the maximum money that can be 
 * robbed from the subtree rooted at the given node if the current node is not robbed,
 * and the second element represents the maximum money that can be robbed from 
 * the subtree rooted at the given node if the current node is robbed. 
 * The rob function returns the maximum money that can be robbed from the entire tree.
 * O(n) and O(h)
 */
class Solution {
    public int rob(TreeNode root) {
        // two elements in result array
        int[] result  = dfs(root);
        return Math.max(result[0], result[1]);

        
    }

    private int[] dfs(TreeNode node) {
        // if  node is null
        if (node == null)  return new int[] {0,0};
        int[] left  = dfs(node.left);
        int[] right = dfs(node.right);

        int[] result = new int[2];
        // not rob cur node , then dep on left and right
        result[0] = Math.max(left[0],left[1]) + Math.max(right[0],right[1]);
        // rob cur node
        result[1] = node.val + left[0] + right[0];
        return result;


    }
}

https://leetcode.com/problems/word-ladder-ii/


