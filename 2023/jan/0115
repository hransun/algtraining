https://leetcode.com/problems/course-schedule-ii/

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        int[] indegree = new int[numCourses];
        buildGraph(numCourses,prerequisites,graph,indegree);
        return topologicalSort(graph,indegree,numCourses);

        
    }

    private void buildGraph(int numCourses,int[][] prerequisites,Map<
            Integer,List<Integer>> graph,int[] indegree) {
        for (int i = 0; i < numCourses; i++) {
            graph.put(i,new ArrayList<>());
        }
        for (int[] edge: prerequisites) {
            int  parent = edge[1];
            int child = edge[0];
            graph.get(parent).add(child);
            indegree[child]++;
        }
    }

    private int[] topologicalSort(Map<
            Integer,List<Integer>> graph,int[] indegree,int numCourses) {
        Queue<Integer> queue =  new LinkedList<>();
        int[] order = new int[numCourses];
        int index = 0;
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }
        while (!queue.isEmpty()) {
            int current = queue.poll();
            order[index++] = current;
            for (int child : graph.get(current)) {
                indegree[child]--;
                if (indegree[child] == 0) {
                    queue.offer(child);
                }
            }
        }
        if   (index != numCourses) return new int[0];
        return order;

    }
}

time (v+e) , space (v+e)



https://leetcode.com/problems/trapping-rain-water-ii/



https://leetcode.com/problems/shortest-distance-from-all-buildings/
