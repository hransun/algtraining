https://leetcode.com/problems/course-schedule-ii/

class Solution {
    public int[] findOrder(int numCourses, int[][] prerequisites) {
        Map<Integer, List<Integer>> graph = new HashMap<>();
        int[] indegree = new int[numCourses];
        buildGraph(numCourses,prerequisites,graph,indegree);
        return topologicalSort(graph,indegree,numCourses);

        
    }

    private void buildGraph(int numCourses,int[][] prerequisites,Map<
            Integer,List<Integer>> graph,int[] indegree) {
        for (int i = 0; i < numCourses; i++) {
            graph.put(i,new ArrayList<>());
        }
        for (int[] edge: prerequisites) {
            int  parent = edge[1];
            int child = edge[0];
            graph.get(parent).add(child);
            indegree[child]++;
        }
    }

    private int[] topologicalSort(Map<
            Integer,List<Integer>> graph,int[] indegree,int numCourses) {
        Queue<Integer> queue =  new LinkedList<>();
        int[] order = new int[numCourses];
        int index = 0;
        for (int i = 0; i < numCourses; i++) {
            if (indegree[i] == 0) {
                queue.offer(i);
            }
        }
        while (!queue.isEmpty()) {
            int current = queue.poll();
            order[index++] = current;
            for (int child : graph.get(current)) {
                indegree[child]--;
                if (indegree[child] == 0) {
                    queue.offer(child);
                }
            }
        }
        if   (index != numCourses) return new int[0];
        return order;

    }
}

time (v+e) , space (v+e)



https://leetcode.com/problems/trapping-rain-water-ii/

import java.util.PriorityQueue;

//leetcode submit region begin(Prohibit modification and deletion)
class Cell {
    int r, c, height; // long, width,height
    Cell(int r, int c,int  height) {
        this.r = r;
        this.c = c;
        this.height = height;
    }
}
class Solution {
    public int trapRainWater(int[][] heightMap) {
        // trap rain  water I : find left, right max and get the min of them.
        // loop the array  calculate  diff of each elemen and min value. added  up.
        if (heightMap == null || heightMap.length == 0 || heightMap[0].length == 0) {
            return 0;
        }

        PriorityQueue<Cell> minHeap = new PriorityQueue<Cell>((a,b) -> a.height - b.height);
        int m = heightMap.length, n = heightMap[0].length;
        boolean[][] visited = new boolean[m][n];

        // add all the edges
        for (int i = 0; i < m; i++) {
            visited[i][0] = visited[i][n-1] = true;
            minHeap.offer(new Cell(i,0,heightMap[i][0]));
            minHeap.offer(new Cell(i,n-1,heightMap[i][n-1]));
        }
        for (int i = 0;i < n;i++) {
            visited[0][i] = visited[m-1][i] = true;
            minHeap.offer(new Cell(0,i,heightMap[0][i]));
            minHeap.offer(new Cell(m-1,i,heightMap[m-1][i]));
        }

        int[] dx = {0,-1,0,1};
        int[] dy = {1,0,-1,0};
        int res = 0;

        // run heap
        while(!minHeap.isEmpty()) {
            Cell cell = minHeap.poll();
            for (int i = 0; i < 4; i++) {
                int r = cell.r + dx[i];
                int  c = cell.c + dy[i];
                if ( r <0 || r>= m || c < 0 || c >= n || visited[r][c]) {
                    continue;
                }
                visited[r][c] = true;
                res += Math.max(0, cell.height - heightMap[r][c]);
                /**
                 * we are adding the neighbor cell to the heap with the maximum height
                 * between the current height of the neighbor and the height of
                 * the cell that was just removed from the heap.
                 */
                // only neighbor high than center can hold water.
                minHeap.offer(new Cell(r,c,Math.max(heightMap[r][c],cell.height)));
            }
        }
        return res;
        
    }
}
//leetcode submit region end(Prohibit modification and deletion)




https://leetcode.com/problems/shortest-distance-from-all-buildings/

class Solution {
    public int shortestDistance(int[][] grid) {
        int m = grid.length,n = grid[0].length;
        int[][] dist = new int[m][n];
        // how many buildings have been visited.
        int[][] nums = new int[m][n];
        int buildings = 0;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                // looking for distance from building to empty place
                if (grid[i][j] == 1) {
                    buildings++;
                    bfs(grid,dist,nums,i,j);
                }

            }

        }

        int minDist = Integer.MAX_VALUE;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0 && nums[i][j] == buildings) {
                    minDist = Math.min(minDist,dist[i][j]);
                }
            }
        }
        return minDist == Integer.MAX_VALUE? -1:minDist;

        
    }

    // modify parameters, dist and  nums
    private void bfs(int[][] grid,int[][] dist,int[][] nums,int x,  int y) {
        // bfs used a queue and visited array
        int m = grid.length,n = grid[0].length;
        boolean[][] visited = new boolean[m][n];
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[] {x,y});
        visited[x][y] = true;
        int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
        int distance = 0;
        while (!queue.isEmpty()) {
            distance++; // bfs level
            int size = queue.size();
            for (int i = 0; i < size; i++) {
                int[] curr = queue.poll();
                for (int[] dir : dirs) {
                    int x1 = curr[0] + dir[0], y1 = curr[1] + dir[1];
                    if (x1 < 0 || x1 >= m || y1 <0 || y1 >= n|| visited[x1][y1]
                    || grid[x1][y1]!=0) {
                        // only looking for empty space
                        continue;
                    }
                    dist[x1][y1]+= distance;
                    nums[x1][y1]++;
                    visited[x1][y1] = true;
                    queue.offer(new int[] {x1,y1});
                }
            }
        }
    }
}
