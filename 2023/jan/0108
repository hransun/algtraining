https://leetcode.com/problems/shortest-unsorted-continuous-subarray/

class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int start = 0;
        int  end = -1; // make end - start + 1 = 0
        int max = nums[0];
        int min = nums[nums.length-1];
        for (int i =0;i < nums.length;i++) {
            if (nums[i] >= max) {
                max = nums[i];
            }
            else {
                end = i;
            }

        }

        for (int i = nums.length-1;i >=0;i--) {
            if (nums[i] <= min) {
                min = nums[i];
            }
            else {
                start = i;
            }
        }

        return end - start +1;
        
    }
}

https://leetcode.com/problems/russian-doll-envelopes/

class Solution {
    public int maxEnvelopes(int[][] envelopes) {
        // coner case
        if (envelopes == null ||envelopes.length == 0 ) return 0;
        // sort the array
        // ascending by x ,  decending by y
        Arrays.sort(envelopes,(a,b)-> a[0]!= b[0]? a[0] - b[0]:b[1] - a[1]);
        // dp init
        int[] dp = new int[envelopes.length];
        Arrays.fill(dp,1);
        int rst = 1;
        // dp formula
        for (int i = 1; i <dp.length ; i++) {
            for (int j = 0; j < i; j++) {
                // width , height all large than
                if (envelopes[i][0] > envelopes[j][0] && envelopes[i][1] > envelopes[j][1]) {
                    dp[i] = Math.max(dp[i],dp[j] + 1);
                }

            }
            rst = Math.max(rst,dp[i]);
        }
        return rst;
    }
}

leetcode 366
https://leetcode.com/problems/find-leaves-of-binary-tree/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> findLeaves(TreeNode root) {
        List<List<Integer>> leaves = new ArrayList<>();
        Map<TreeNode,Integer> nodeToDepth = new HashMap<>();
        computeDepths(root,nodeToDepth);
        int maxDepth = 0;
        for (int depth: nodeToDepth.values()) {
            maxDepth = Math.max(maxDepth,depth);
        }
        for (int i = 0; i < maxDepth+1; i++) {
            leaves.add(new ArrayList<>());
        }
        for (Map.Entry<TreeNode,Integer> entry:nodeToDepth.entrySet()) {
            leaves.get(entry.getValue())
            .add(entry.getKey().val);
        }
        return leaves;
        
    }
    // get the height/depth of the node and save it to nodeToDepth map
    public int computeDepths(TreeNode node, Map<TreeNode,Integer> nodeToDepth) {
        if (node == null) {
            return -1;
        }
        int  leftDepth = computeDepths(node.left,nodeToDepth);
        int rightDepth = computeDepths(node.right,nodeToDepth);
        int depth = 1+ Math.max(leftDepth,rightDepth);
        //before return save it  to the map
        nodeToDepth.put(node,depth);
        return depth;
    }
}



