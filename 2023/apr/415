https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph/

// dfs solution
class Solution {
    public int countComponents(int n, int[][] edges) {
        List<List<Integer>> graph = new ArrayList<>();
        Set<Integer> visited = new HashSet<>();
        int count = 0;
        // build graph
        constructGraph(edges,graph,n);
        for (int i = 0; i < n; i++) {
            if (!visited.contains(i)) {
                dfsHelper(i,graph,visited);
                count++;
            }
        }
        return count;

    }
    private void constructGraph(int[][] edges, List<List<Integer>> neis, int n) {
        for (int i = 0; i < n; i++) {
            neis.add(new ArrayList<Integer>());
        }
        // add neighbors
        for (int[] edge : edges) {
            // non direction graph
            neis.get(edge[0]).add(edge[1]);
            neis.get(edge[1]).add(edge[0]);
        }
    }

    // dfs recursion helper call
    private void dfsHelper(int cur, List<List<Integer>> neis, Set<Integer> visited) {
        visited.add(cur);
        List<Integer> nei = neis.get(cur);
        for (Integer i: nei) {
            if (!visited.contains(i))
                dfsHelper(i,neis,visited);
        }
    }
}

//bfs solution
class Solution {
    // bfs solution
    public int countComponents(int n, int[][] edges) {

        List<List<Integer>> neis = new ArrayList<>();
        boolean[] isVisited = new boolean[n];
        constructGraph(edges,neis,n);
        int count = 0;
        for (int i = 0; i < n; i++) {
            if (!isVisited[i]) {
                bfsHelper(i,neis,isVisited);
                count++;
            }
        }
        return count;
    }
    private void bfsHelper(int enter,List<List<Integer>> neis,boolean[] isVisited) {
        isVisited[enter] = true;
        Deque<Integer> queue = new LinkedList<>();
        queue.offerLast(enter);
        while (!queue.isEmpty()) {
            int cur = queue.pollFirst();
            for (Integer i: neis.get(cur)) {
                if (!isVisited[i]) {
                    queue.offerLast(i);
                    isVisited[i] = true;
                }
            }
        }
    }

    private void constructGraph(int[][] edges, List<List<Integer>> neis, int n) {
        //1. Create List
        for (int i = 0; i < n; i++) {
            neis.add(new ArrayList<Integer>());
        }
        //2. Add neighbors
        for (int[] edge : edges) {
            System.out.println(edge[0] + " " + edge[1]);
            neis.get(edge[0]).add(edge[1]);
            neis.get(edge[1]).add(edge[0]);
        }
    }
}


// union find solutionß
class Solution {
    public int countComponents(int n, int[][] edges) {
        int[] root = new int[n];
        for (int i = 0; i < n; i++) {
            root[i] = i;
        }
        for(int[] edge: edges){
            //
            int parent = findRoot(root,edge[0]);
            int child = findRoot(root,edge[1]);
            root[child]= parent;


        }
        int count =0;
        for (int i = 0; i < n; i++) {
            if (root[i] == i) {
                count++;
            }
        }
        return count;
    }
    private int findRoot(int[] root,int cur) {
        // all the way going up
        while (cur != root[cur]) {
            root[cur]=root[root[cur]];
            cur = root[cur];
        }
        return cur;
    }
}ß


https://leetcode.com/problems/course-schedule/

// dfs solution

class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        if (prerequisites == null || prerequisites.length==0
        || prerequisites[0]== null ||
        prerequisites[0].length ==0)
            return true;
        // build a graph
        List<List<Integer>> neighborList = new ArrayList<>();
        initLists(prerequisites,neighborList,numCourses);
        int[] status = new int[numCourses];
        // dfs
        for (int i = 0; i < numCourses; i++) {
            if (status[i]==0 && !dfsHelper(neighborList,status , i)) {
                return false;
            }
        }
        return true;
    }

    private void initLists(int[][] prerequisites,
                           List<List<Integer>> neighborList,
                           int numCourses) {
        for (int i = 0; i < numCourses; i++) {
            List<Integer> neighbor = new ArrayList<>();
            neighborList.add(neighbor);
        }
        // adj list
        for(int[] course: prerequisites) {
            neighborList.get(course[1]).add(course[0]);
        }
    }
    private boolean dfsHelper(
            List<List<Integer>> neighborList,
            int[] status,
            int cur
    ) { // 0 -> no visit, 1-> visited , -1 -> on current track still
        status[cur] = -1;
        for (int i: neighborList.get(cur)) {
            // current loop already visit -> have circle, or dfs return false
            if (status[i] == -1 || !dfsHelper(neighborList,status,i)) {
                return false;
            }

        }
        status[cur] = 1;
        return true;
    }
}

https://leetcode.com/problems/walls-and-gates/

https://leetcode.com/problems/candy/

https://leetcode.com/problems/climbing-stairs/

https://leetcode.com/problems/count-primes/

