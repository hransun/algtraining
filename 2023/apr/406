https://leetcode.com/problems/number-of-islands/

dfs - 2d array

class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid[0].length ==0) return 0;
        int count = 0;
        int row = grid.length;
        int col = grid[0].length;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == '1') {
                    removeIsland(grid,row,col,i,j);
                    count +=1;
                }
            }
        }
        return count;
        
    }

    private void removeIsland(char[][] grid, int row, int col, int x , int y) {
        grid[x][y] = '0';
        for (int i = -1; i <=1 ; i++) {
            for (int j = -1; j <= 1; j++) {
                //(-1|1|0,-1|1|0)
                // valid one 
                // -> right 0,1
                // <- left 0 , -1
                // up , -1,0
                // down, +1,0
                // must be 0 and 1/-1, can not be both 0 or both 1 .
                if (isValid(i,j,x,y,row,col)
                && grid[i + x][j + y]=='1') {
                    removeIsland(grid,row,col,x + i, y + j);
                }
            }
        }
    }
    private boolean isValid(int di , int dj, int i , int j , int row, int col) {
        return Math.abs(di) != Math.abs(dj) && i + di >= 0
                && i + di <row
                && j + dj >=0
                && j + dj < col;
    }
}


https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/ 