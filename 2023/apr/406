https://leetcode.com/problems/number-of-islands/

dfs - 2d array

class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid[0].length ==0) return 0;
        int count = 0;
        int row = grid.length;
        int col = grid[0].length;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == '1') {
                    removeIsland(grid,row,col,i,j);
                    count +=1;
                }
            }
        }
        return count;
        
    }

    private void removeIsland(char[][] grid, int row, int col, int x , int y) {
        grid[x][y] = '0';
        for (int i = -1; i <=1 ; i++) {
            for (int j = -1; j <= 1; j++) {
                //(-1|1|0,-1|1|0)
                // valid one 
                // -> right 0,1
                // <- left 0 , -1
                // up , -1,0
                // down, +1,0
                // must be 0 and 1/-1, can not be both 0 or both 1 .
                if (isValid(i,j,x,y,row,col)
                && grid[i + x][j + y]=='1') {
                    removeIsland(grid,row,col,x + i, y + j);
                }
            }
        }
    }
    private boolean isValid(int di , int dj, int i , int j , int row, int col) {
        return Math.abs(di) != Math.abs(dj) && i + di >= 0
                && i + di <row
                && j + dj >=0
                && j + dj < col;
    }
}

bfs - 2d array
class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid[0].length ==0) return 0;
        int count = 0;
        int row = grid.length;
        int col = grid[0].length;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == '1') {
                    removeBFS(i,j,grid,row,col);
                    count +=1;
                }
            }
        }
        return count;
        
    }
    private void removeBFS(int x , int y ,  char[][] grid , int m , int n) {
        Deque<Integer> queue = new LinkedList<>();
        queue.offer(x  * n + y);
        grid[x][y] = '0';
        while (!queue.isEmpty()) {
            int cur = queue.poll();
            int curX = cur / n;
            int curY = cur % n;
            for (int i = -1; i <=1 ; i++) {
                for (int j = -1; j <= 1; j++) {
                    if (isValid(i,j,curX,curY,m,n) && grid[curX + i][curY+j] == '1') {
                        queue.offer((curX + i) * n + curY + j);
                        grid[curX + i][curY + j] = '0';
                    }
                }
            }
        }
    }


    private boolean isValid(int di , int dj, int i , int j , int row, int col) {
        return Math.abs(di) != Math.abs(dj) && i + di >= 0
                && i + di <row
                && j + dj >=0
                && j + dj < col;
    }
}


// union find solution
class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid[0].length ==0) return 0;
        int count = 0;
        int row = grid.length;
        int col = grid[0].length;
        int[] groupTag = new int[row * col];
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                //  water is a  goup , 1 is each group
                groupTag[i*col + j] = grid[i][j] == '1'?i * col + j:-1;
            }
        }
        // union  find
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < col; j++) {
                if (grid[i][j] == '0') {
                    continue;
                }
                // grid[i][j] = '1'
                if (j + 1 < col  && grid[i][j+1] == '1') {
                    union(i,j,i,j+1,groupTag,col);
                }
                if (i +1< row  && grid[i+1][j] == '1') {
                    union(i,j,i+1,j,groupTag,col);
                }
            }
        }
        for (int i = 0; i <col * row ; i++) {
            if (groupTag[i] == i ) {
                // root if fa[root] == root
                count++;
            }
        }
        return count;
        
    }

    private void find(int smIndex , int bgIndex,   int[] tag) {
        // find the root , compress path ,
        while (tag[smIndex] != bgIndex) {
            // test bgIndex is smIndex father, if not  going up
            int tmp = tag[bgIndex];
            // path compress, father - > son changed to both  point to the same fater
            tag[bgIndex] = tag[smIndex];
            bgIndex = tmp;
        }
        tag[bgIndex] = tag[smIndex];
    }

    private void union(int i1 , int  j1 , int  i2, int  j2,int[] tag, int n) {
        int index1 = i1 * n + j1;
        int index2 = i2 * n + j2;
        if (tag[index1] == tag[index2]) {
            // already unioned
            return;
        }
        if (tag[index1] < tag[index2]) {
            if (tag[index2] != index2) {
                find(index1,index2,tag);
            }
            tag[index2] = tag[index1]; // index2 point to itself in parent's array
        } else {
            // root of index 1 big
            if (tag[index1] != index1) {
                find(index2,index1,tag);
            }
            tag[index1] = tag[index2];
        }

    }

}


https://leetcode.com/problems/kth-smallest-element-in-a-sorted-matrix/ 

https://leetcode.com/problems/factor-combinations/

https://leetcode.com/problems/sudoku-solver/

https://leetcode.com/problems/merge-k-sorted-lists/

https://leetcode.com/problems/find-k-pairs-with-smallest-sums/



