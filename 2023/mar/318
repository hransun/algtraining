https://leetcode.com/problems/symmetric-tree/

class Solution {
    public boolean isSymmetric(TreeNode root) {
        if (root == null) return true;
        Deque<TreeNode> deque = new LinkedList<>();
        deque.offerFirst(root.left);
        deque.offerLast(root.right);
        while (!deque.isEmpty()) {
            TreeNode left = deque.pollFirst();
            TreeNode right = deque.pollLast();
            // check
            if (left == null && right == null)  continue;
            if (left == null || right == null  || left.val != right.val){
                return false;
            }
            // add new elements
            // add left
            deque.offerFirst(left.right);
            deque.offerFirst(left.left);
            deque.offerLast(right.left);
            deque.offerLast(right.right);
        }
        return true;
    }
}

recursion:

class Solution {
    public boolean isSymmetric(TreeNode root) {
        return helper(root.left,root.right);

    }

    private boolean helper(TreeNode t1 , TreeNode t2) {
        if (t1 == null && t2 == null) return true;
        else if (t1 == null ||t2 == null) return false;
        else if (t1.val != t2.val) return false;
        else return helper(t1.left,t2.right) && helper(t1.right,t2.left);
    }
}

https://leetcode.com/problems/binary-tree-upside-down/