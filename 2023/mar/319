https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/

class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums == null || nums.length ==0) return null;
        return buildtree(nums,0, nums.length-1);

        
    }
    private TreeNode buildtree(int[] nums,int start, int end) {
        if (start > end) return null;
        int mid = (start + end) / 2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = buildtree(nums,start, mid -1);
        root.right =  buildtree(nums,mid+1,end);
        return root;
    }
}


https://leetcode.com/problems/spiral-matrix/

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new ArrayList<>();
        if (matrix== null || matrix.length == 0) {
            return res;
        }
        if (matrix[0] == null || matrix[0].length ==0) return res;
        int row = matrix.length;
        int col = matrix[0].length;
        helper(res,matrix,row,col,0);
        return res;

    }

    private void helper(List<Integer> res , int[][] matrix,int row, int  col , int offset) {
        // base case
        if (row ==0|| col ==0) {
        return;
        }
        if (row == 1) {
            // only 1 row

            for (int i = offset; i <col + offset ; i++) {
                res.add(matrix[offset][i]);
            }
            return;
        }
        if (col ==1) {
            // only 1 col
            for (int i = offset; i <row + offset ; i++) {
                res.add(matrix[i][offset]);

            }
            return;
        }
        // 1 .  up row
        // col -1 not include last col
        // offset means shift right
        for (int i = offset; i <col-1 + offset ; i++) {
            res.add(matrix[offset][i]);
        }
        // right col
        for (int i = offset; i <row - 1+ offset ; i++) {
            res.add(matrix[i][col-1+offset]);
        }
        // bottom row
        for (int i = col-1 + offset; i > offset ; i--) {
            res.add(matrix[row - 1+offset][i]);
        }
        // left col
        for (int i = row-1 + offset; i > offset; i--) {
            res.add(matrix[i][offset]);
        }
        helper(res,matrix,row - 2,col -2,offset +1);
    }
}


https://leetcode.com/problems/spiral-matrix-ii/

https://leetcode.com/problems/sort-an-array/ merge sort 

https://leetcode.com/problems/search-in-rotated-sorted-array/

https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/

https://leetcode.com/problems/path-sum/
#  https://leetcode.com/problems/path-sum/
#  https://leetcode.com/problems/path-sum-ii/
#  https://leetcode.com/problems/path-sum-iii/
https://leetcode.com/problems/path-sum-iv/
https://leetcode.com/problems/binary-tree-maximum-path-sum/

