https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/

class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        if (nums == null || nums.length ==0) return null;
        return buildtree(nums,0, nums.length-1);

        
    }
    private TreeNode buildtree(int[] nums,int start, int end) {
        if (start > end) return null;
        int mid = (start + end) / 2;
        TreeNode root = new TreeNode(nums[mid]);
        root.left = buildtree(nums,start, mid -1);
        root.right =  buildtree(nums,mid+1,end);
        return root;
    }
}


https://leetcode.com/problems/spiral-matrix/

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> res = new ArrayList<>();
        if (matrix== null || matrix.length == 0) {
            return res;
        }
        if (matrix[0] == null || matrix[0].length ==0) return res;
        int row = matrix.length;
        int col = matrix[0].length;
        helper(res,matrix,row,col,0);
        return res;

    }

    private void helper(List<Integer> res , int[][] matrix,int row, int  col , int offset) {
        // base case
        if (row ==0|| col ==0) {
        return;
        }
        if (row == 1) {
            // only 1 row

            for (int i = offset; i <col + offset ; i++) {
                res.add(matrix[offset][i]);
            }
            return;
        }
        if (col ==1) {
            // only 1 col
            for (int i = offset; i <row + offset ; i++) {
                res.add(matrix[i][offset]);

            }
            return;
        }
        // 1 .  up row
        // col -1 not include last col
        // offset means shift right
        for (int i = offset; i <col-1 + offset ; i++) {
            res.add(matrix[offset][i]);
        }
        // right col
        for (int i = offset; i <row - 1+ offset ; i++) {
            res.add(matrix[i][col-1+offset]);
        }
        // bottom row
        for (int i = col-1 + offset; i > offset ; i--) {
            res.add(matrix[row - 1+offset][i]);
        }
        // left col
        for (int i = row-1 + offset; i > offset; i--) {
            res.add(matrix[i][offset]);
        }
        helper(res,matrix,row - 2,col -2,offset +1);
    }
}


https://leetcode.com/problems/spiral-matrix-ii/

class Solution {
    public int[][] generateMatrix(int n) {
        if (n <=0) return new int[0][0];
        int cur[] = {0};
        int[][] res = new int[n][n];
        helper(res,cur,n,0);
        return res;
        
    }
    // global res
    private void helper(int[][] res , int[] cur, int size,int offset) {
        // base case
        if (size ==0) return;
        if (size == 1) {
            res[offset][offset] = ++cur[0];
            return;
        }
        // 1, first row size -1 + offset - offset
        for (int i = offset; i <size -1 + offset ; i++) {
            res[offset][i] = ++cur[0]; // start from 1
        }
        // 2, right col
        for (int i = offset; i <size -1 + offset ; i++) {
            res[i][size-1+offset] = ++cur[0];
        }
        // 3, bottom row
        for (int i = size -1 + offset; i > offset ; i--) {
            res[size-1+offset][i] = ++cur[0];
        }
        // 4 first col
        for (int i = size-1+offset; i > offset ; i--) {
            res[i][offset] = ++cur[0];
        }
        helper(res,cur,size-2,offset+1);
    }
}

https://leetcode.com/problems/sort-an-array/ merge sort 

class Solution {
    public int[] sortArray(int[] nums) {
        if (nums == null) return nums;
        int[] helper = new int[nums.length];
        doSort(nums,helper,0,nums.length-1);
        return nums;
        
    }
    private void doSort(int[] nums,int[] helper, int start, int  end) {
        if (start >= end) return; // until one element return
        int mid = (start + end) / 2;
        doSort(nums,helper,start,mid);
        doSort(nums,helper,mid+1,end);
        merge(nums,helper,start,mid,end);
    }

    private void merge(int[] nums,int[] helper,int aStart, int aEnd , int bEnd) {
        // copy processing data to tmp array
        for (int i = aStart; i <= bEnd ; i++) {
            helper[i] = nums[i];
        }
        // merge sort these data
        int aCur = aStart;
        int bCur = aEnd+1;
        for (int i = aStart; i <=bEnd ; i++) {
            if (aCur > aEnd) {
                nums[i] = helper[bCur++];
            } else if (bCur > bEnd) {
                nums[i] = helper[aCur++];
            } else if (helper[aCur] <= helper[bCur]) {
                nums[i] = helper[aCur++];
            } else {
                nums[i] = helper[bCur++];
            }

        }

    }
}


https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>() ;
        if (root== null) return res;
        Deque<TreeNode> deque = new LinkedList<>();
        boolean flag = true;
        deque.add(root);
        while(!deque.isEmpty()) {
            int size = deque.size();
            List<Integer> list = new ArrayList<>();
            for (int i = 0; i < size; i++) {
                if (flag) {
                    // left to right
                    TreeNode cur = deque.pollFirst();
                    list.add(cur.val);
                    // next level right to left
                    if (cur.left != null) {
                        deque.offerLast(cur.left);
                    }
                    if (cur.right!= null) {
                        deque.offerLast(cur.right);
                    }
                } else {
                    // right to left
                    TreeNode cur = deque.pollLast();
                    list.add(cur.val);
                    if (cur.right != null) {
                        deque.offerFirst(cur.right);
                    }
                    if (cur.left != null) {
                        deque.offerFirst(cur.left);
                    }
                }

            }
            flag = flag ? false: true;
            res.add(list);

        }
        return res;
    }
}

https://leetcode.com/problems/path-sum/

class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if (root == null) return false;

        int sum = targetSum - root.val;
        if (root.left == null && root.right == null  ) {
            return sum==0;
        }
        return  (hasPathSum(root.left,sum) || hasPathSum(root.right,sum));
    }
}
#  https://leetcode.com/problems/path-sum-ii/

class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) return res;
        List<Integer> list = new ArrayList<>();
        helper(root,targetSum,list,res);
        return res;

        
    }
    private void helper(TreeNode root, int sum , List<Integer> list,
                        List<List<Integer>> res ) {
        // function to update list and rst
        if (root == null) return;
        list.add(root.val);
        if (sum == root.val && root.left == null && root.right ==null) {
            res.add(new ArrayList<Integer>(list));
            //res.add(list); can't do this as pass by ref,list alwasy changing 
        } else {
            helper(root.left,sum- root.val , list,res);
            helper(root.right,sum- root.val,list,res);
        }
        list.remove(list.size()-1);


    }
}

#  https://leetcode.com/problems/path-sum-iii/
https://leetcode.com/problems/path-sum-iv/
https://leetcode.com/problems/binary-tree-maximum-path-sum/

class Solution {
    public int maxPathSum(TreeNode root) {
        if (root == null) {
            return Integer.MIN_VALUE;
        }
        int[] max = {Integer.MIN_VALUE};
        helper(root,max);
        return max[0];
        
    }
    private int helper(TreeNode root, int[] max) {
        // return cur level pathsum max
        // also calc global max []max
        // base case
        if (root == null) return 0;

        int left = helper(root.left,max);
        int right = helper(root.right,max);
        left = Math.max(left,0);
        right = Math.max(right,0);

        // global max have  to include cur node.
        max[0] = Math.max(max[0],left+right+ root.val);

        return Math.max(left,right) + root.val;




    }
}

# delete node in a BST
# https://leetcode.com/problems/delete-node-in-a-bst/

class Solution {
    public TreeNode deleteNode(TreeNode root, int key) {
        if (root == null) return root;
        TreeNode dummy = new TreeNode(-1);
        dummy.left = root;
        TreeNode prev = dummy;
        TreeNode cur = root;
        // find the node
        while (cur != null && cur.val != key) {
            prev = cur;
            if (cur.val < key) {
                cur = cur.right;
            } else {
                cur = cur.left;
            }
        }
        if (cur== null) return dummy.left;
        // found it
        TreeNode target = cur;
        // case 1 two child
        if (cur.left != null && cur.right != null) {
            // looking  for min of  right tree
            prev = cur;
            cur = cur.right;
            while (cur.left != null) {
                prev = cur;
                cur = cur.left;
            }
            target.val = cur.val;
        }
        // case 2 , only one or no child
        if (cur.left == null) {
            // only have right  tree
            if (prev.left == cur) {
                prev.left = cur.right;
            } else {
                prev.right =  cur.right;
            }
        } else {
            // only have left tree
            if (prev.left == cur) {
                prev.left = cur.left;
            } else {
                prev.right =  cur.left;
            }

        }
        return dummy.left;

        
    }
}
# largest bst subtree
# https://leetcode.com/problems/largest-bst-subtree/

class Result {
    int size;
    int   min;
    int  max;
    public Result(int size,int min, int max) {
        this.size = size;
        this.min = min;
        this.max = max;
    }
}

class Solution {

    public int largestBSTSubtree(TreeNode root) {
        if ( root == null) {
            return 0;
        }
        int[] max = {0};
        Result res = helper(root,max);
        return max[0];
        
    }
    private Result helper(TreeNode root, int[] max) {
        // recursive function
        if (root == null) {
            return new Result(0,Integer.MAX_VALUE,Integer.MIN_VALUE);
        }
        Result left = helper(root.left,max);
        Result right = helper(root.right,max);
        // root is not valid or only root
        if (left.size == -1 || right.size == -1 || root.val <= left.max ||
         root.val >= right.min) {
            // false why 0 , 0
            return new Result(-1, -1,-1);
        } else {
            max[0] = Math.max(max[0], left.size + right.size +1);
            return  new Result(left.size + right.size + 1,Math.min(left.min , root.val), Math.max(right.max,root.val));
        }
    }
}
