https://leetcode.com/problems/minimum-window-substring/

class Solution {
    public String minWindow(String s, String t) {
        if (s == null || t == null || s.length() ==0 || t.length() == 0 ||
                s.length() < t.length()) {
            return new String();
        }
        int[] map = new int[128];
        int count = t.length();
        int start = 0, end = 0, minLen = Integer.MAX_VALUE,startIndex =0;
        for (char c :t.toCharArray()) {
            map[c]++;
        }
        char[] chS = s.toCharArray();
        while (end < chS.length) {
            // map and count sync + , -
            if (map[chS[end++]]-- >0) {
                // end  match count--
                count--;
            }
            while (count == 0) {
                // calculate min len
                if (end - start < minLen) {
                    startIndex = start;
                    // here end already +1  is next index of  window  end.
                    minLen = end - start;
                }
                if (map[chS[start++]]++ == 0) {
                    // remove start , less match, count++
                    count++;
                }
            }
        }

        return minLen == Integer.MAX_VALUE? new String():
                new String(chS,startIndex,minLen);
    }
}


class Solution {
    public String minWindow(String s, String t) {
        if (s == null || t == null || s.length() ==0 || t.length() == 0 ||
                s.length() < t.length()) {
            return new String();
        }
        Map<Character,Integer> frequency = new HashMap<>();
        int count = t.length();
        int left = 0, right = 0, minLen = Integer.MAX_VALUE,startIndex =-1;
        for (char c :t.toCharArray()) {
            Integer freq = frequency.get(c);
            if (freq == null) {
                frequency.put(c,1);
            } else {
                frequency.put(c,freq +1);
            }
        }
        char[] chS = s.toCharArray();
        while (right < chS.length) {
           Integer freq = frequency.get(chS[right]);
           if (freq !=  null) {
               frequency.put(chS[right],freq-1);
               if (freq > 0) {
                   count--;
               }
           }
           right++;
           while(count ==0) {
               if (right - left < minLen) {
                   minLen = right - left;
                   startIndex= left;
               }
               Integer exist = frequency.get(chS[left]);
               if (exist != null) {
                   frequency.put(chS[left],exist+1);
                   if (exist == 0) {
                       count++;
                   }
               }
               left++;
           }
        }

        return minLen == Integer.MAX_VALUE? new String():
                new String(chS,startIndex,minLen);
    }
}