https://leetcode.com/problems/search-in-a-binary-search-tree/

iteration:

class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if (root == null) return root;
        while (root != null) {
            if (val > root.val) {
                root = root.right;
            } else if (val == root.val) {
                return root;
            } else {
                root = root.left;
            }

        }

        return root;
        
    }
}

recursion:

class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if (root == null || root.val == val) return  root;
        if (root.val > val ) {
            return searchBST(root.left,val);
        } else {
            return searchBST(root.right, val);
        }
        
    }
}

https://leetcode.com/problems/insert-into-a-binary-search-tree/

class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode node = new TreeNode(val);
        //  if none node in the tree
        if (root == null ) return node;
        if (root.val > val) {
            root.left = insertIntoBST(root.left,val);
        } else {
            root.right = insertIntoBST(root.right,val);
        }
        return root;
    }
}

https://leetcode.com/problems/inorder-successor-in-bst/

