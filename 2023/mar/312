https://leetcode.com/problems/search-in-a-binary-search-tree/

iteration:

class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if (root == null) return root;
        while (root != null) {
            if (val > root.val) {
                root = root.right;
            } else if (val == root.val) {
                return root;
            } else {
                root = root.left;
            }

        }

        return root;
        
    }
}

recursion:

class Solution {
    public TreeNode searchBST(TreeNode root, int val) {
        if (root == null || root.val == val) return  root;
        if (root.val > val ) {
            return searchBST(root.left,val);
        } else {
            return searchBST(root.right, val);
        }
        
    }
}

https://leetcode.com/problems/insert-into-a-binary-search-tree/

class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        TreeNode node = new TreeNode(val);
        //  if none node in the tree
        if (root == null ) return node;
        if (root.val > val) {
            root.left = insertIntoBST(root.left,val);
        } else {
            root.right = insertIntoBST(root.right,val);
        }
        return root;
    }
}


iteration
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        if (root == null) return new TreeNode(val);
        TreeNode parent = root;
        TreeNode cur = root;
        while (cur != null) {
            parent = cur;
            if (cur.val > val) {
                cur = cur.left;
            } else {
                cur = cur.right;
            }
        }
        if (parent.val > val) {
            parent.left = new TreeNode(val);
        } else {
            parent.right = new TreeNode(val);
        }
        return root;
    }
}

https://leetcode.com/problems/inorder-successor-in-bst/

class Solution {
    public TreeNode inorderSuccessor(TreeNode root, TreeNode p) {
            if (root == null) return root;
            // case 1 with right node
        if (p.right != null) {
            return searchLeftMost(p.right);
        }
        // case 2 without right node
        else {
            return searchParent(root,p);
        }
        
    }

    private TreeNode searchLeftMost(TreeNode root) {
        while (root.left != null) {
            root = root.left;
        }
        return root;
    }
    // search from root to the p , return last parent of p
    // which p.val < parent.val
    // like two pointers
    private TreeNode searchParent(TreeNode root, TreeNode p) {
        TreeNode par = null;
        TreeNode cur = root;
        while ( cur != p) {
            if (cur.val > p.val) {
                par = cur;
                cur = cur = cur.left;
            } else {
                cur = cur.right;
            }
        }
        return par;
    }
}

