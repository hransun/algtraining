https://leetcode.com/problems/permutations/

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> cur = new ArrayList<>();
        helper(nums,result,cur,0);
        return result;
        
    }

    private void helper(int[] nums,List<List<Integer>> result,List<Integer> cur, int index) {
        // base case
        if (cur.size() == nums.length) {
            result.add(new ArrayList<>(cur));
            return;
        }
        for (int i =index;i < nums.length;i++) {
               cur.add(nums[i]);
               // other element want to try on that position
            swap(nums,index,i);
            System.out.println("first " + index+ "->" + i);
            helper(nums,result,cur,index+1);
            swap(nums,index,i);
            System.out.println("second " + index + "->" + i);
            cur.remove(cur.size()-1);
        }
    }
    private void swap(int[]nums,int i , int j) {
        int tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
    }
}
