https://leetcode.com/problems/two-sum/

class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] result = new int[2];
        if (nums == null || nums.length < 2) return result;
        Map<Integer,Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(target - nums[i])) {
                result[0] = map.get(target - nums[i]);
                result[1] = i;
                return result; // if found just return without loop all array.
            } else {
                map.put(nums[i],i );
            }
        }
        return result;
    }
}

https://leetcode.com/problems/sort-colors/

class Solution {
    public void sortColors(int[] nums) {
        int left = 0;
        int right = nums.length-1;
        int cur = 0;
        // left , right is not sure, cur and left is start together, 1 no, move
        // , 2  , already move to right
        while (cur <=right) {
            if (nums[cur] == 0) {
                swap(nums,cur++,left++);
            } else if (nums[cur] == 1) {
                cur++;
            } else {
                // swap from right is not sure 1
                swap(nums,cur,right--);
            }
        }


        
    }
    private void swap(int[] arr, int i, int j) {
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
}