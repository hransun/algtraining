https://leetcode.com/problems/first-bad-version/

ublic class Solution extends VersionControl {
    public int firstBadVersion(int n) {
        if (n <=0) return Integer.MIN_VALUE;
        int left = 1 ;
        int right = n;
        while (left < right-1) {
            int mid = left + (right - left) / 2;
            if (isBadVersion(mid)) {
                right = mid;
            } else {
                left = mid;
            }
        }
        return isBadVersion(left)?left:right;
        
    }
}


https://leetcode.com/problems/search-in-rotated-sorted-array/


class Solution {
    public int search(int[] nums, int target) {
        if (nums == null || nums.length == 0) return -1;
        int  left = 0 ;
        int right = nums.length -1;
        while (left < right -1) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) return mid;
            if (nums[mid] > nums[left]) {
                // before pivot
                if (target >= nums[left] && target < nums[mid]) {
                    // must be in sorted range
                    right = mid;
                } else {
                    left = mid;
                }
             // after pivot
            } else {
                if (target > nums[mid] && target <= nums[right]) {
                    // must be in sorted range
                    left = mid;
                } else {
                    right = mid;
                }
            }
        }

        if (nums[left] == target) {
            return left;
        }
        if (nums[right] == target) {
            return right;
        }
        return -1;

        
    }
}


https://leetcode.com/problems/search-in-rotated-sorted-array-ii/

